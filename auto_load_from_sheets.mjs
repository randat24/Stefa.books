#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ Google Sheets
 * –ù–∞—á–∏–Ω–∞–µ—Ç —Å 11-–π –∫–Ω–∏–≥–∏ (—Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–µ 10 —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
 */

import { google } from 'googleapis';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // Google Sheets
  spreadsheetId: process.env.GOOGLE_SHEET_ID || 'YOUR_SPREADSHEET_ID',
  range: process.env.GOOGLE_SHEET_RANGE || 'Books!A1:Z105',
  
  // Supabase
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  startFromBook: 11, // –ù–∞—á–∏–Ω–∞–µ–º —Å 11-–π –∫–Ω–∏–≥–∏
  batchSize: 20,
  dryRun: process.env.DRY_RUN === 'true',
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(CONFIG.supabaseUrl, CONFIG.supabaseServiceKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets
async function authenticateGoogleSheets() {
  try {
    const auth = new google.auth.GoogleAuth({
      keyFile: process.env.GOOGLE_SERVICE_ACCOUNT_KEY_FILE || './google-service-account.json',
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });
    
    const authClient = await auth.getClient();
    return google.sheets({ version: 'v4', auth: authClient });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function getDataFromGoogleSheets() {
  try {
    const sheets = await authenticateGoogleSheets();
    
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...');
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: CONFIG.spreadsheetId,
      range: CONFIG.range,
    });
    
    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = rows[0];
    const dataRows = rows.slice(1);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dataRows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    return { headers, dataRows };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏
function rowToBookObject(headers, row, index) {
  const book = {};
  
  headers.forEach((header, colIndex) => {
    const value = row[colIndex] || '';
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    switch (header.toLowerCase()) {
      case '–Ω–∞–∑–≤–∞':
      case 'title':
        book.title = value;
        break;
      case '–∞–≤—Ç–æ—Ä':
      case 'author':
        book.author = value;
        break;
      case 'isbn':
        book.isbn = value;
        break;
      case '–æ–ø–∏—Å':
      case 'description':
        book.description = value;
        break;
      case '–æ–±–∫–ª–∞–¥–∏–Ω–∫–∞':
      case 'cover_url':
        book.cover_url = value;
        break;
      case '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è':
      case 'category':
        book.category = value;
        break;
      case '–¥–æ—Å—Ç—É–ø–Ω–∞':
      case 'available':
        book.available = value.toLowerCase() === '—Ç–∞–∫' || value.toLowerCase() === 'true' || value === '1';
        break;
    }
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∫–Ω–∏–≥–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 11-–π)
  const year = new Date().getFullYear();
  const sequence = String(index + CONFIG.startFromBook).padStart(4, '0');
  book.code = `SB-${year}-${sequence}`;
  
  return book;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function loadBooksToDatabase(books) {
  try {
    console.log(`üìö –ó–∞–≥—Ä—É–∑–∫–∞ ${books.length} –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    
    if (CONFIG.dryRun) {
      console.log('üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      console.log('üìñ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏:', JSON.stringify(books[0], null, 2));
      return { success: true, loaded: 0, updated: 0, errors: 0 };
    }
    
    let loaded = 0;
    const updated = 0;
    let errors = 0;
    const errorMessages = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –±–∞—Ç—á–∞–º–∏
    for (let i = 0; i < books.length; i += CONFIG.batchSize) {
      const batch = books.slice(i, i + CONFIG.batchSize);
      
      try {
        const { error } = await supabase
          .from('books')
          .upsert(batch, { 
            onConflict: 'code',
            ignoreDuplicates: false 
          });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}:`, error.message);
          errors += batch.length;
          errorMessages.push(`–ë–∞—Ç—á ${i + 1}: ${error.message}`);
        } else {
          loaded += batch.length;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥ (–±–∞—Ç—á ${i + 1})`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}:`, error.message);
        errors += batch.length;
        errorMessages.push(`–ë–∞—Ç—á ${i + 1}: ${error.message}`);
      }
    }
    
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
    console.log(`   üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded}`);
    console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    
    if (errorMessages.length > 0) {
      console.log('‚ùå –û—à–∏–±–∫–∏:');
      errorMessages.forEach(error => console.log(`   - ${error}`));
    }
    
    return { success: true, loaded, updated, errors, errorMessages };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞
function createSqlScript(books) {
  let sql = `-- ============================================================================
-- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–ì–†–£–ó–ö–ò –ö–ù–ò–ì
-- ============================================================================
-- –°–æ–∑–¥–∞–Ω: ${new Date().toISOString()}
-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: ${books.length}
-- –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–Ω–∏–≥–∏: ${CONFIG.startFromBook}

-- 1. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
CREATE OR REPLACE FUNCTION find_category_by_parts(category_string TEXT)
RETURNS UUID AS $$
DECLARE
    category_parts TEXT[];
    part TEXT;
    found_category_id UUID;
BEGIN
    IF category_string IS NULL OR trim(category_string) = '' THEN
        RETURN NULL;
    END IF;
    
    category_parts := string_to_array(trim(category_string), ',');
    
    FOREACH part IN ARRAY category_parts
    LOOP
        part := trim(part);
        
        SELECT id INTO found_category_id 
        FROM public.categories 
        WHERE name ILIKE '%' || part || '%' 
        AND parent_id IS NOT NULL
        ORDER BY 
            CASE WHEN name ILIKE part THEN 1 ELSE 2 END
        LIMIT 1;
        
        IF found_category_id IS NOT NULL THEN
            RETURN found_category_id;
        END IF;
    END LOOP;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏
INSERT INTO public.books (
    title, 
    author, 
    isbn, 
    description, 
    cover_url, 
    category_id, 
    available, 
    code
) VALUES

`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏
  books.forEach((book, index) => {
    const year = new Date().getFullYear();
    const sequence = String(index + CONFIG.startFromBook).padStart(4, '0');
    const code = `SB-${year}-${sequence}`;
    
    const available = book.available ? 'true' : 'false';
    
    sql += `('${book.title.replace(/'/g, "''")}', '${book.author.replace(/'/g, "''")}', '${book.isbn}', '${book.description.replace(/'/g, "''")}', '${book.cover_url}', find_category_by_parts('${book.category}'), ${available}, '${code}')`;
    
    if (index < books.length - 1) {
      sql += ',\n';
    } else {
      sql += '\n';
    }
  });
  
  sql += `
ON CONFLICT (code) DO UPDATE SET
    title = EXCLUDED.title,
    author = EXCLUDED.author,
    isbn = EXCLUDED.isbn,
    description = EXCLUDED.description,
    cover_url = EXCLUDED.cover_url,
    category_id = EXCLUDED.category_id,
    updated_at = NOW();

-- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SELECT 
    '–ö–Ω–∏–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!' as status,
    (SELECT COUNT(*) FROM public.books) as total_books,
    (SELECT COUNT(*) FROM public.books WHERE available = true) as available_books,
    (SELECT COUNT(DISTINCT category_id) FROM public.books WHERE category_id IS NOT NULL) as categories_with_books,
    (SELECT COUNT(DISTINCT author) FROM public.books) as unique_authors;

-- 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
SELECT 
    b.title,
    b.author,
    b.code,
    c.name as category_name,
    b.available
FROM public.books b
LEFT JOIN public.categories c ON b.category_id = c.id
ORDER BY b.created_at DESC
LIMIT 20;
`;

  return sql;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –∏–∑ Google Sheets...');
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${CONFIG.spreadsheetId}`);
    console.log(`üìã –î–∏–∞–ø–∞–∑–æ–Ω: ${CONFIG.range}`);
    console.log(`üî¢ –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–Ω–∏–≥–∏: ${CONFIG.startFromBook}`);
    console.log(`üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${CONFIG.dryRun ? '–í–ö–õ' : '–í–´–ö–õ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const { headers, dataRows } = await getDataFromGoogleSheets();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –∫–Ω–∏–≥
    const books = dataRows
      .filter(row => row.some(cell => cell && cell.trim() !== ''))
      .map((row, index) => rowToBookObject(headers, row, index));
    
    console.log(`üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${books.length} –∫–Ω–∏–≥`);
    
    // –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const sqlScript = createSqlScript(books);
    const sqlPath = './auto_generated_books_loader.sql';
    fs.writeFileSync(sqlPath, sqlScript);
    console.log(`üìÑ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: ${sqlPath}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await loadBooksToDatabase(books);
    
    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    const reportPath = './auto_load_report.json';
    fs.writeFileSync(reportPath, JSON.stringify({
      timestamp: new Date().toISOString(),
      config: CONFIG,
      result: result,
      booksCount: books.length
    }, null, 2));
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export {
  getDataFromGoogleSheets,
  loadBooksToDatabase,
  createSqlScript,
  rowToBookObject
};
