#!/usr/bin/env node

/**
 * API Endpoints Test Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É API endpoints —Å–∞–π—Ç–∞
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

async function testAPIEndpoint(endpoint, method = 'GET', body = null) {
    try {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(`${BASE_URL}${endpoint}`, options);
        const data = await response.json();

        return {
            success: response.ok,
            status: response.status,
            data: data,
            error: response.ok ? null : data
        };
    } catch (error) {
        return {
            success: false,
            status: 0,
            data: null,
            error: error.message
        };
    }
}

async function testAllEndpoints() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...\n');

    const endpoints = [
        { path: '/api/books', method: 'GET', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥' },
        { path: '/api/categories', method: 'GET', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' },
        { path: '/api/authors', method: 'GET', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤' },
        { path: '/api/subscribe', method: 'POST', name: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É', body: {
            name: 'Test User',
            email: 'test@example.com',
            phone: '+380123456789',
            plan: 'basic'
        }},
        { path: '/api/admin/books', method: 'GET', name: '–ê–¥–º–∏–Ω: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥' },
        { path: '/api/admin/categories', method: 'GET', name: '–ê–¥–º–∏–Ω: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' },
        { path: '/api/admin/users', method: 'GET', name: '–ê–¥–º–∏–Ω: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }
    ];

    const results = [];

    for (const endpoint of endpoints) {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint.name}`);
        console.log(`   ${endpoint.method} ${endpoint.path}`);
        
        const result = await testAPIEndpoint(endpoint.path, endpoint.method, endpoint.body);
        
        if (result.success) {
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ (${result.status})`);
            if (result.data && Array.isArray(result.data)) {
                console.log(`   üìä –ó–∞–ø–∏—Å–µ–π: ${result.data.length}`);
            } else if (result.data && typeof result.data === 'object') {
                console.log(`   üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã`);
            }
        } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ (${result.status}): ${result.error}`);
        }
        
        results.push({
            ...endpoint,
            ...result
        });
        
        console.log('');
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê API:');
    console.log('=====================================');
    
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((successful / results.length) * 100)}%`);
    
    if (failed > 0) {
        console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ endpoints:');
        results.filter(r => !r.success).forEach(r => {
            console.log(`   - ${r.name}: ${r.error}`);
        });
    }

    return results;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerAvailability() {
    console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/books`);
        if (response.ok) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } else {
            console.log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:');
        console.log('   npm run dev');
        console.log('   –∏–ª–∏');
        console.log('   pnpm dev');
        return false;
    }
}

async function main() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints Stefa.Books\n');
    
    const serverAvailable = await checkServerAvailability();
    
    if (!serverAvailable) {
        console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
        console.log('   cd /Users/fantomas/Documents/GitHub/Stefa.books.com.ua');
        console.log('   pnpm dev');
        process.exit(1);
    }
    
    console.log('');
    await testAllEndpoints();
}

main().catch(console.error);
