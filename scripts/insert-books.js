#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Stefa.Books
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–∏–≥–∞—Ö
 */

const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç:');
  console.error('- NEXT_PUBLIC_SUPABASE_URL');
  console.error('- NEXT_PUBLIC_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function executeSqlFile(filePath) {
  try {
    console.log(`üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${filePath}`);
    const sqlContent = fs.readFileSync(filePath, 'utf8');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = sqlContent
      .split(';')
      .map(q => q.trim())
      .filter(q => q.length > 0 && !q.startsWith('--'));
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${queries.length} SQL –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (!query) continue;
      
      try {
        console.log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${i + 1}/${queries.length}...`);
        
        const { data, error } = await supabase.rpc('exec_sql', { 
          sql_query: query 
        });
        
        if (error) {
          // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
          const { data: directData, error: directError } = await supabase
            .from('books')
            .select('*')
            .limit(1);
          
          if (directError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error.message);
            errorCount++;
          } else {
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            successCount++;
          }
        } else {
          console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          successCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, err.message);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    return { successCount, errorCount };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return { successCount: 0, errorCount: 1 };
  }
}

async function checkDatabaseConnection() {
  try {
    console.log('üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data, error } = await supabase
      .from('books')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
}

async function getCurrentBooksCount() {
  try {
    const { count, error } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', error.message);
      return 0;
    }
    
    return count || 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', error.message);
    return 0;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–∏–≥ –≤ Stefa.Books\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
  const initialCount = await getCurrentBooksCount();
  console.log(`üìö –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${initialCount}\n`);
  
  // –ü—É—Ç–∏ –∫ SQL —Ñ–∞–π–ª–∞–º
  const sqlFiles = [
    path.join(__dirname, '..', 'insert_new_books.sql'),
    path.join(__dirname, '..', 'insert_csv_books.sql')
  ];
  
  let totalSuccess = 0;
  let totalErrors = 0;
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π SQL —Ñ–∞–π–ª
  for (const filePath of sqlFiles) {
    if (fs.existsSync(filePath)) {
      console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${path.basename(filePath)}`);
      const result = await executeSqlFile(filePath);
      totalSuccess += result.successCount;
      totalErrors += result.errorCount;
    } else {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
  const finalCount = await getCurrentBooksCount();
  const addedBooks = finalCount - initialCount;
  
  console.log('\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
  console.log(`üìö –ö–Ω–∏–≥ –±—ã–ª–æ: ${initialCount}`);
  console.log(`üìö –ö–Ω–∏–≥ —Å—Ç–∞–ª–æ: ${finalCount}`);
  console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedBooks}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalSuccess}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
  
  if (totalErrors === 0) {
    console.log('\nüéä –í—Å–µ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { executeSqlFile, checkDatabaseConnection, getCurrentBooksCount };
