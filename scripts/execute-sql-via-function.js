const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function executeSQL() {
  console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Edge Function...');
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('scripts/restructure-database-fixed.sql', 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = sqlContent
      .split(';')
      .map(q => q.trim())
      .filter(q => q.length > 0 && !q.startsWith('--'));
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${queries.length} SQL –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Edge Function
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      console.log(`\n${i + 1}. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...`);
      console.log(`   ${query.substring(0, 100)}${query.length > 100 ? '...' : ''}`);
      
      try {
        const { data, error } = await supabase.functions.invoke('execute-sql', {
          body: { sql: query }
        });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        } else {
          console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          if (data && data.data) {
            console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, data.data);
          }
        }
      } catch (err) {
        console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, err.message);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('\n‚úÖ –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const { data: books, error } = await supabase
      .from('books')
      .select('id, title, author, category, subcategory')
      .limit(5);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    } else {
      console.log('üìö –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏:');
      books.forEach(book => {
        console.log(`   - "${book.title}" by ${book.author} [${book.category}]`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL:', error);
  }
}

executeSQL();
