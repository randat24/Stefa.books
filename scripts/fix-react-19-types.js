const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫ –¥–ª—è React 19...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, pattern) {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...findFiles(fullPath, pattern));
    } else if (stat.isFile() && pattern.test(item)) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è React 19
  const fixes = [
    // –ó–∞–º–µ–Ω–∞ memo –Ω–∞ React.memo
    {
      from: /import\s*{\s*([^}]*)\bmemo\b([^}]*)\s*}\s*from\s*['"]react['"]/g,
      to: (match, before, after) => {
        const cleanBefore = before.replace(/,\s*$/, '').trim();
        const cleanAfter = after.replace(/,\s*$/, '').trim();
        const beforePart = cleanBefore ? cleanBefore + ', ' : '';
        const afterPart = cleanAfter ? ', ' + cleanAfter : '';
        return `import { ${beforePart}${afterPart} } from 'react';\nimport { memo } from 'react'`;
      }
    },
    
    // –ó–∞–º–µ–Ω–∞ forwardRef –Ω–∞ React.forwardRef
    {
      from: /React\.forwardRef/g,
      to: 'forwardRef'
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ forwardRef
    {
      from: /import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g,
      to: (match, imports) => {
        if (content.includes('forwardRef') && !imports.includes('forwardRef')) {
          return `import { ${imports}, forwardRef } from 'react'`;
        }
        return match;
      }
    },
    
    // –ó–∞–º–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫
    {
      from: /QrCode/g,
      to: 'QrCodeIcon'
    },
    {
      from: /AlertTriangle/g,
      to: 'AlertTriangleIcon'
    },
    {
      from: /MoreHorizontal/g,
      to: 'MoreHorizontalIcon'
    },
    {
      from: /History/g,
      to: 'HistoryIcon'
    },
    {
      from: /Circle/g,
      to: 'CircleIcon'
    },
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è forwardRef
    {
      from: /React\.ElementRef/g,
      to: 'ElementRef'
    },
    {
      from: /React\.ComponentPropsWithoutRef/g,
      to: 'ComponentPropsWithoutRef'
    },
    {
      from: /React\.HTMLAttributes/g,
      to: 'HTMLAttributes'
    },
    {
      from: /React\.ThHTMLAttributes/g,
      to: 'ThHTMLAttributes'
    },
    {
      from: /React\.TdHTMLAttributes/g,
      to: 'TdHTMLAttributes'
    },
    {
      from: /React\.TextareaHTMLAttributes/g,
      to: 'TextareaHTMLAttributes'
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤
    {
      from: /import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g,
      to: (match, imports) => {
        const neededTypes = [];
        if (content.includes('ElementRef') && !imports.includes('ElementRef')) neededTypes.push('ElementRef');
        if (content.includes('ComponentPropsWithoutRef') && !imports.includes('ComponentPropsWithoutRef')) neededTypes.push('ComponentPropsWithoutRef');
        if (content.includes('HTMLAttributes') && !imports.includes('HTMLAttributes')) neededTypes.push('HTMLAttributes');
        if (content.includes('ThHTMLAttributes') && !imports.includes('ThHTMLAttributes')) neededTypes.push('ThHTMLAttributes');
        if (content.includes('TdHTMLAttributes') && !imports.includes('TdHTMLAttributes')) neededTypes.push('TdHTMLAttributes');
        if (content.includes('TextareaHTMLAttributes') && !imports.includes('TextareaHTMLAttributes')) neededTypes.push('TextareaHTMLAttributes');
        
        if (neededTypes.length > 0) {
          return `import { ${imports}, ${neededTypes.join(', ')} } from 'react'`;
        }
        return match;
      }
    },
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ createContext –∏ useContext
    {
      from: /import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g,
      to: (match, imports) => {
        if ((content.includes('createContext') || content.includes('useContext')) && !imports.includes('createContext') && !imports.includes('useContext')) {
          return `import { ${imports}, createContext, useContext } from 'react'`;
        }
        return match;
      }
    },
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ReactNode
    {
      from: /import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g,
      to: (match, imports) => {
        if (content.includes('ReactNode') && !imports.includes('ReactNode')) {
          return `import { ${imports}, ReactNode } from 'react'`;
        }
        return match;
      }
    }
  ];

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  for (const fix of fixes) {
    const newContent = content.replace(fix.from, fix.to);
    if (newContent !== content) {
      content = newContent;
      modified = true;
    }
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  content = content.replace(/\(e\)\s*=>/g, '(e: React.ChangeEvent<HTMLInputElement>) =>');
  content = content.replace(/\(prev\)\s*=>/g, '(prev: any) =>');
  content = content.replace(/\(user\)\s*=>/g, '(user: any) =>');
  content = content.replace(/\(book\)\s*=>/g, '(book: any) =>');

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
    return true;
  }
  
  return false;
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
const tsFiles = findFiles('src', /\.(ts|tsx)$/);
let fixedCount = 0;

console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${tsFiles.length} TypeScript —Ñ–∞–π–ª–æ–≤`);

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
for (const file of tsFiles) {
  try {
    if (fixFile(file)) {
      fixedCount++;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${file}:`, error.message);
  }
}

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript...');
try {
  execSync('npx tsc --noEmit --skipLibCheck', { stdio: 'inherit' });
  console.log('‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
} catch (error) {
  console.log('‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ TypeScript');
}
