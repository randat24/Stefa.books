#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
 */

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  let changed = false;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã react
  content = content.replace(
    /import\s+\{[^}]*\}\s+from\s+"react\nimport\s+Image\s+from\s+'next\/image'";/g,
    (match) => {
      const reactImport = match.match(/import\s+\{[^}]*\}\s+from\s+"react/)[0];
      return reactImport + '";';
    }
  );
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã lucide-react
  content = content.replace(
    /import\s+\{[^}]*\}\s+from\s+"lucide-react\nimport\s+Image\s+from\s+'next\/image'";/g,
    (match) => {
      const lucideImport = match.match(/import\s+\{[^}]*\}\s+from\s+"lucide-react/)[0];
      return lucideImport + '";';
    }
  );
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã react-hook-form
  content = content.replace(
    /import\s+\{[^}]*\}\s+from\s+"react\nimport\s+Image\s+from\s+'next\/image'-hook-form";/g,
    (match) => {
      const hookFormImport = match.match(/import\s+\{[^}]*\}\s+from\s+"react/)[0];
      return hookFormImport + '-hook-form";';
    }
  );
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–ø–æ—Ä—Ç—ã Image
  const imageImports = content.match(/import\s+Image\s+from\s+['"]next\/image['"];?\s*/g);
  if (imageImports && imageImports.length > 1) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏–º–ø–æ—Ä—Ç Image
    content = content.replace(/import\s+Image\s+from\s+['"]next\/image['"];?\s*/g, '');
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∏–º–ø–æ—Ä—Ç Image –≤ –Ω–∞—á–∞–ª–æ
    const firstImportIndex = content.indexOf('import');
    if (firstImportIndex !== -1) {
      content = content.slice(0, firstImportIndex) + 'import Image from "next/image";\n' + content.slice(firstImportIndex);
    }
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(
    /import\s+\{[^}]*\}\s+from\s+"[^"]*\n[^"]*";/g,
    (match) => {
      const lines = match.split('\n');
      const firstLine = lines[0];
      const secondLine = lines[1];
      
      if (firstLine.includes('"') && !firstLine.endsWith('"')) {
        return firstLine + '";';
      }
      
      return match;
    }
  );
  
  if (content !== fs.readFileSync(filePath, 'utf8')) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
    changed = true;
  }
  
  return changed;
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const srcDir = path.join(process.cwd(), 'src');
const componentsDir = path.join(srcDir, 'components');

function walkDir(dir) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      walkDir(filePath);
    } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
      fixFile(filePath);
    }
  });
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
console.log('üìÅ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
walkDir(componentsDir);

console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
