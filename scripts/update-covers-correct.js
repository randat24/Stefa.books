#!/usr/bin/env node

/**
 * –ü–†–ê–í–ò–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ë–õ–û–ñ–ï–ö –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 */

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { createClient } = require('@supabase/supabase-js');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { google } = require('googleapis');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const fs = require('fs');
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets API
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
});

const sheets = google.sheets({ version: 'v4', auth });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
 */
function loadUploadResults() {
  try {
    const data = fs.readFileSync('direct-upload-results.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
 */
async function getSheetData() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.GOOGLE_SPREADSHEET_ID,
      range: '–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥!A:Z'
    });
    
    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
      return [];
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const dataRows = rows.slice(1);
    
    return dataRows.map(row => ({
      code: row[0] || '',
      title: row[1] || '',
      author: row[2] || '',
      coverUrl: row[10] || '', // –§–æ—Ç–æ (URL)
      coverFilename: row[row.length - 1] || '' // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getAllBooks() {
  try {
    const { data, error } = await supabase
      .from('books')
      .select('id, code, title, cover_url')
      .order('code');
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
    return [];
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏
 */
async function updateBookCover(bookId, newCoverUrl) {
  try {
    const { error } = await supabase
      .from('books')
      .update({ cover_url: newCoverUrl })
      .eq('id', bookId);
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —Å –∫–Ω–∏–≥–∞–º–∏
 */
function createCorrectMapping(sheetData, uploadResults, books) {
  const mapping = [];
  
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∫–Ω–∏–≥ –ø–æ –∫–æ–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const booksByCode = {};
  books.forEach(book => {
    booksByCode[book.code] = book;
  });
  
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–µ–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const coversByFilename = {};
  uploadResults.results.forEach(result => {
    if (result.success) {
      coversByFilename[result.filename] = result.cloudinaryUrl;
    }
  });
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –æ–±–ª–æ–∂–∫–∞–º–∏
  sheetData.forEach(sheetRow => {
    const bookCode = sheetRow.code;
    const coverFilename = sheetRow.coverFilename;
    const book = booksByCode[bookCode];
    const cloudinaryUrl = coversByFilename[coverFilename];
    
    if (book && cloudinaryUrl) {
      mapping.push({
        bookId: book.id,
        bookCode: book.code,
        bookTitle: book.title,
        sheetTitle: sheetRow.title,
        coverFilename: coverFilename,
        cloudinaryUrl: cloudinaryUrl,
        currentCoverUrl: book.cover_url
      });
    } else if (book && !cloudinaryUrl) {
      console.log(`‚ö†Ô∏è  –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–Ω–∏–≥–∏ ${bookCode}: ${book.title} (—Ñ–∞–π–ª: ${coverFilename})`);
    } else if (!book && cloudinaryUrl) {
      console.log(`‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –æ–±–ª–æ–∂–∫–∏: ${coverFilename} (–∫–æ–¥: ${bookCode})`);
    }
  });
  
  return mapping;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ü–†–ê–í–ò–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ë–õ–û–ñ–ï–ö –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
  console.log('=' .repeat(60));
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫...');
    const uploadResults = loadUploadResults();
    if (!uploadResults) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      return;
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadResults.successful} –æ–±–ª–æ–∂–µ–∫`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    const sheetData = await getSheetData();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${sheetData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üìö –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const books = await getAllBooks();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    console.log('üîó –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —Å –∫–Ω–∏–≥–∞–º–∏...');
    const mapping = createCorrectMapping(sheetData, uploadResults, books);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${mapping.length} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π`);
    
    if (mapping.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –º–µ–∂–¥—É –æ–±–ª–æ–∂–∫–∞–º–∏ –∏ –∫–Ω–∏–≥–∞–º–∏');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π:');
    mapping.slice(0, 5).forEach(item => {
      console.log(`üìñ ${item.bookCode}: ${item.bookTitle}`);
      console.log(`   –§–∞–π–ª: ${item.coverFilename}`);
      console.log(`   –ù–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞: ${item.cloudinaryUrl}`);
      console.log(`   –¢–µ–∫—É—â–∞—è –æ–±–ª–æ–∂–∫–∞: ${item.currentCoverUrl ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
      console.log('');
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    let successCount = 0;
    let errorCount = 0;
    
    for (const item of mapping) {
      console.log(`üìñ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è ${item.bookCode}: ${item.bookTitle}`);
      
      const success = await updateBookCover(item.bookId, item.cloudinaryUrl);
      if (success) {
        console.log(`   ‚úÖ –û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        successCount++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultData = {
      timestamp: new Date().toISOString(),
      totalMappings: mapping.length,
      successful: successCount,
      failed: errorCount,
      mappings: mapping
    };
    
    fs.writeFileSync('correct-cover-update-results.json', JSON.stringify(resultData, null, 2));
    
    console.log('\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìö –í—Å–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: ${mapping.length}`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: correct-cover-update-results.json`);
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
