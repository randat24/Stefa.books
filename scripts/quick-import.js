#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

const fs = require('fs');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–µ—Ç SQL —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥
 */
function createImportSQL(books) {
  let sql = '-- ============================================================================\n';
  sql += '-- QUICK IMPORT FROM GOOGLE SHEETS\n';
  sql += '-- ============================================================================\n\n';
  
  sql += '-- –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n';
  sql += 'DELETE FROM public.book_authors;\n';
  sql += 'DELETE FROM public.books;\n';
  sql += 'DELETE FROM public.authors;\n\n';
  
  sql += '-- –ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥\n';
  sql += 'INSERT INTO "public"."books" (\n';
  sql += '    "id", "code", "title", "author", "category", "subcategory",\n';
  sql += '    "description", "short_description", "isbn", "pages", "age_range",\n';
  sql += '    "language", "publisher", "publication_year", "cover_url", "status",\n';
  sql += '    "available", "qty_total", "qty_available", "price_uah", "location",\n';
  sql += '    "rating", "rating_count", "badges", "tags", "search_vector",\n';
  sql += '    "search_text", "created_at", "updated_at"\n';
  sql += ') VALUES\n';
  
  const values = [];
  
  books.forEach((book, index) => {
    const value = generateBookSQL(book, index + 1);
    values.push(value);
  });
  
  sql += values.join(',\n') + ';\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
  sql += '-- –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤\n';
  sql += 'INSERT INTO public.authors (name, created_at)\n';
  sql += 'SELECT DISTINCT\n';
  sql += '    author,\n';
  sql += '    NOW()\n';
  sql += 'FROM public.books\n';
  sql += 'WHERE author IS NOT NULL\n';
  sql += 'AND author NOT IN (SELECT name FROM public.authors);\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
  sql += '-- –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏\n';
  sql += 'INSERT INTO public.book_authors (book_id, author_id, role)\n';
  sql += 'SELECT\n';
  sql += '    b.id,\n';
  sql += '    a.id,\n';
  sql += '    \'author\'\n';
  sql += 'FROM public.books b\n';
  sql += 'JOIN public.authors a ON b.author = a.name;\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  sql += '-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n';
  sql += 'SELECT\n';
  sql += '    \'Quick import completed!\' as status,\n';
  sql += '    (SELECT COUNT(*) FROM public.books) as books_count,\n';
  sql += '    (SELECT COUNT(*) FROM public.authors) as authors_count,\n';
  sql += '    (SELECT COUNT(*) FROM public.book_authors) as book_authors_count;\n';
  
  return sql;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
 */
function generateBookSQL(book, index) {
  const id = `gen_random_uuid()`;
  const code = book.code || `'BOOK${index}'`;
  const title = book.title || `'–ö–Ω–∏–≥–∞ ${index}'`;
  const author = book.author || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä';
  const category = book.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
  const description = book.description || null;
  const isbn = book.isbn || null;
  const pages = book.pages || null;
  const ageRange = book.ageRange || null;
  const language = book.language || 'uk';
  const publisher = book.publisher || null;
  const year = book.year || null;
  const coverUrl = book.coverUrl || null;
  const status = 'available';
  const available = true;
  const qtyTotal = 1;
  const qtyAvailable = 1;
  const price = book.price || null;
  const location = '–≤—É–ª. –ú–∞—Ä—ñ—É–ø–æ–ª—å—Å—å–∫–∞ 13/2, –ú–∏–∫–æ–ª–∞—ó–≤';
  const rating = null;
  const ratingCount = 0;
  const badges = '{}';
  const tags = null;
  
  // –°–æ–∑–¥–∞–µ–º search_text
  const searchText = `${title} ${author} ${category}`;
  
  return `    (${id}, ${code}, ${escapeString(title)}, ${escapeString(author)}, ${escapeString(category)}, null, ${escapeString(description)}, null, ${escapeString(isbn)}, ${pages}, ${escapeString(ageRange)}, ${escapeString(language)}, ${escapeString(publisher)}, ${year}, ${escapeString(coverUrl)}, ${escapeString(status)}, ${available}, ${qtyTotal}, ${qtyAvailable}, ${price}, ${escapeString(location)}, ${rating}, ${ratingCount}, ${badges}, ${escapeString(tags)}, to_tsvector('simple', ${escapeString(searchText)}), ${escapeString(searchText)}, NOW(), NOW())`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è SQL
 */
function escapeString(str) {
  if (str === null || str === undefined) return 'null';
  return `'${str.replace(/'/g, "''")}'`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥...');
  
  // –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï –ò–ó GOOGLE –¢–ê–ë–õ–ò–¶–´
  const books = [
    {
      code: '7873',
      title: '–ö–∏–º —Ö–æ—Ç—ñ–ª–∞ –±—É—Ç–∏ –ü–∞–Ω–¥–∞?',
      author: '–°–≤—ñ—Ç–ª–∞–Ω–∞ –ú–∏—Ä–æ—à–Ω–∏—á–µ–Ω–∫–æ',
      category: '–ö–∞–∑–∫–∞',
      description: '–ß–∞—Ä—ñ–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ –ø–∞–Ω–¥—É, —è–∫–∞ –º—Ä—ñ—î —Å—Ç–∞—Ç–∏ –∫–∏–º–æ—Å—å –æ—Å–æ–±–ª–∏–≤–∏–º. –ö–Ω–∏–≥–∞ –¥–ª—è –¥—ñ—Ç–µ–π –¥–æ—à–∫—ñ–ª—å–Ω–æ–≥–æ –≤—ñ–∫—É –∑ –∫—Ä–∞—Å–∏–≤–∏–º–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—è–º–∏.',
      isbn: '978-966-942-123-4',
      pages: 32,
      ageRange: '3-6 —Ä–æ–∫—ñ–≤',
      language: 'uk',
      publisher: '–í—ñ–≤–∞—Ç',
      year: 2023,
      coverUrl: 'https://drive.google.com/uc?export=view&id=1ABC123',
      price: 240.00
    },
    {
      code: '5560',
      title: '–ö–æ—Ç–∏–≥–æ—Ä–æ—à–∫–æ',
      author: '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä',
      category: '–ö–∞–∑–∫–∏',
      description: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞—Ä–æ–¥–Ω–∞ –∫–∞–∑–∫–∞ –ø—Ä–æ —Ö–æ—Ä–æ–±—Ä–æ–≥–æ —Ö–ª–æ–ø—á–∏–∫–∞ –ö–æ—Ç–∏–≥–æ—Ä–æ—à–∫–∞, —è–∫–∏–π –ø–µ—Ä–µ–º–∞–≥–∞—î –∑–º—ñ—è.',
      isbn: '978-966-942-124-1',
      pages: 24,
      ageRange: '3-6 —Ä–æ–∫—ñ–≤',
      language: 'uk',
      publisher: '–í—ñ–≤–∞—Ç',
      year: 2023,
      coverUrl: 'https://drive.google.com/uc?export=view&id=1DEF456',
      price: 203.00
    },
    {
      code: '3365',
      title: '–î–∂—É–¥—ñ –ú—É–¥—ñ. –ö–Ω–∏–≥–∞ 1',
      author: '–ú–∞–∫–î–æ–Ω–∞–ª–¥ –ú–µ–≥–∞–Ω',
      category: '–ü—Ä–∏–≥–æ–¥–∏',
      description: '–ü–µ—Ä—à–∞ –∫–Ω–∏–≥–∞ —Å–µ—Ä—ñ—ó –ø—Ä–æ –≤–µ—Å–µ–ª—É –¥—ñ–≤—á–∏–Ω–∫—É –î–∂—É–¥—ñ –ú—É–¥—ñ —Ç–∞ —ó—ó –ø—Ä–∏–≥–æ–¥–∏.',
      isbn: '978-966-942-125-8',
      pages: 160,
      ageRange: '6-9 —Ä–æ–∫—ñ–≤',
      language: 'uk',
      publisher: '–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ –°—Ç–∞—Ä–æ–≥–æ –õ–µ–≤–∞',
      year: 2022,
      coverUrl: 'https://drive.google.com/uc?export=view&id=1GHI789',
      price: 158.00
    },
    {
      code: '5616',
      title: '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü',
      author: '–ê–Ω—Ç—É–∞–Ω –î–µ –°–µ–Ω—Ç-–ï–∫–∑—é–ø–µ—Ä—ñ',
      category: '–ö–∞–∑–∫–∞',
      description: '–í—ñ–¥–æ–º–∞ –∫–∞–∑–∫–∞-–ø—Ä–∏—Ç—á–∞ –ø—Ä–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ä–∏–Ω—Ü–∞, —è–∫–∞ –≤—á–∏—Ç—å –¥—ñ—Ç–µ–π —Ü—ñ–Ω–Ω–æ—Å—Ç—è–º –¥—Ä—É–∂–±–∏ —Ç–∞ –ª—é–±–æ–≤—ñ.',
      isbn: '978-966-942-126-5',
      pages: 96,
      ageRange: '8-12 —Ä–æ–∫—ñ–≤',
      language: 'uk',
      publisher: '–ö–ú-–ë—É–∫—Å',
      year: 2021,
      coverUrl: 'https://drive.google.com/uc?export=view&id=1JKL012',
      price: 407.00
    },
    {
      code: '6528',
      title: '–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–∞–∑–∫–∏',
      author: '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä',
      category: '–ö–∞–∑–∫–∏',
      description: '–ó–±—ñ—Ä–∫–∞ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–∞—Ä–æ–¥–Ω–∏—Ö –∫–∞–∑–æ–∫ –¥–ª—è –¥—ñ—Ç–µ–π —Ä—ñ–∑–Ω–æ–≥–æ –≤—ñ–∫—É.',
      isbn: '978-966-942-127-2',
      pages: 128,
      ageRange: '3-8 —Ä–æ–∫—ñ–≤',
      language: 'uk',
      publisher: '–†–∞–Ω–æ–∫',
      year: 2023,
      coverUrl: 'https://drive.google.com/uc?export=view&id=1MNO345',
      price: 300.00
    }
  ];
  
  // –°–æ–∑–¥–∞–µ–º SQL
  const sql = createImportSQL(books);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  const outputPath = path.join(__dirname, 'quick-import-books.sql');
  fs.writeFileSync(outputPath, sql, 'utf8');
  
  console.log(`‚úÖ SQL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
  console.log(`üìö –ì–æ—Ç–æ–≤–æ –∫ –∏–º–ø–æ—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
  console.log(`üìñ –ö–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${books.length}`);
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
  const coverScript = createCoverUploadScript(books);
  const coverPath = path.join(__dirname, 'quick-upload-covers.js');
  fs.writeFileSync(coverPath, coverScript, 'utf8');
  
  console.log(`üñºÔ∏è  –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫: ${coverPath}`);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
 */
function createCoverUploadScript(books) {
  let script = `#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –≤ Cloudinary
 */

const cloudinary = require('cloudinary').v2;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'dchx7vd97',
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

const books = ${JSON.stringify(books, null, 2)};

async function uploadCovers() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫...');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const book of books) {
    try {
      console.log(\`üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: \${book.title} (\${book.code})\`);
      
      if (!book.coverUrl) {
        console.log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏)');
        continue;
      }
      
      const result = await cloudinary.uploader.upload(book.coverUrl, {
        public_id: \`stefa-books/\${book.code}\`,
        folder: 'stefa-books',
        resource_type: 'image',
        transformation: [
          { width: 300, height: 400, crop: 'fill', quality: 'auto' }
        ]
      });
      
      console.log(\`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: \${result.secure_url}\`);
      console.log(\`UPDATE public.books SET cover_url = '\${result.secure_url}' WHERE code = '\${book.code}';\`);
      successCount++;
      
    } catch (error) {
      console.error(\`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ \${book.code}:\`, error.message);
      errorCount++;
    }
  }
  
  console.log(\`\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\`);
  console.log(\`‚úÖ –£—Å–ø–µ—à–Ω–æ: \${successCount}\`);
  console.log(\`‚ùå –û—à–∏–±–æ–∫: \${errorCount}\`);
}

uploadCovers().catch(console.error);
`;
  
  return script;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, createImportSQL, generateBookSQL };
