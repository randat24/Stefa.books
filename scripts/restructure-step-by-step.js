const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function restructureStepByStep() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é...');
  
  const steps = [
    {
      name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
      sql: 'CREATE TABLE books_backup AS SELECT * FROM books;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤',
      sql: 'DROP VIEW IF EXISTS books_with_authors CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π',
      sql: 'ALTER TABLE books DROP COLUMN IF EXISTS category_id CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ author_id',
      sql: 'ALTER TABLE books DROP COLUMN IF EXISTS author_id CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ subcategory_id',
      sql: 'ALTER TABLE books DROP COLUMN IF EXISTS subcategory_id CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã book_authors',
      sql: 'DROP TABLE IF EXISTS book_authors CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã authors',
      sql: 'DROP TABLE IF EXISTS authors CASCADE;'
    },
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories',
      sql: 'DROP TABLE IF EXISTS categories CASCADE;'
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è category',
      sql: 'ALTER TABLE books ADD COLUMN IF NOT EXISTS category VARCHAR(255);'
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è subcategory',
      sql: 'ALTER TABLE books ADD COLUMN IF NOT EXISTS subcategory VARCHAR(255);'
    },
    {
      name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
      sql: `UPDATE books SET 
        category = '–î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 
        subcategory = '–°–∫–∞–∑–∫–∏'
      WHERE category IS NULL;`
    },
    {
      name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è category',
      sql: 'CREATE INDEX IF NOT EXISTS idx_books_category ON books(category);'
    },
    {
      name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è subcategory',
      sql: 'CREATE INDEX IF NOT EXISTS idx_books_subcategory ON books(subcategory);'
    },
    {
      name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è author',
      sql: 'CREATE INDEX IF NOT EXISTS idx_books_author ON books(author);'
    }
  ];
  
  for (let i = 0; i < steps.length; i++) {
    const step = steps[i];
    console.log(`\n${i + 1}. ${step.name}...`);
    
    try {
      const { data, error } = await supabase.rpc('exec_sql', {
        sql_query: step.sql
      });
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ ${i + 1}:`, error);
        console.log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
      } else {
        console.log(`‚úÖ –®–∞–≥ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        if (data && data !== 'Query executed successfully') {
          console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, data);
        }
      }
    } catch (err) {
      console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —à–∞–≥–µ ${i + 1}:`, err.message);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
  try {
    const { data: books, error } = await supabase
      .from('books')
      .select('id, title, author, category, subcategory')
      .limit(5);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    } else {
      console.log('üìö –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏:');
      books.forEach(book => {
        console.log(`   - "${book.title}" by ${book.author} [${book.category}]`);
      });
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', err.message);
  }
  
  console.log('\n‚úÖ –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

restructureStepByStep();
