const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkDuplicates() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ books...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
    const { data: books, error } = await supabase
      .from('books')
      .select('*')
      .order('title');
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
      return;
    }
    
    console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${books.length}`);
    
    // –ò—â–µ–º –¥—É–±–ª–∏ –ø–æ title + author
    const duplicates = {};
    books.forEach(book => {
      const key = `${book.title.toLowerCase().trim()}_${book.author.toLowerCase().trim()}`;
      if (!duplicates[key]) {
        duplicates[key] = [];
      }
      duplicates[key].push(book);
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏
    const actualDuplicates = Object.values(duplicates).filter(group => group.length > 1);
    
    if (actualDuplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }
    
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${actualDuplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π:`);
    
    actualDuplicates.forEach((group, index) => {
      console.log(`\n${index + 1}. "${group[0].title}" - ${group[0].author}`);
      group.forEach((book, bookIndex) => {
        console.log(`   ${bookIndex + 1}. ID: ${book.id}, ISBN: ${book.isbn || '–Ω–µ—Ç'}, –°–æ–∑–¥–∞–Ω–æ: ${book.created_at}`);
      });
    });
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏
    console.log('\nüóëÔ∏è  –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏? (y/n)');
    process.stdin.once('data', async (data) => {
      const answer = data.toString().trim().toLowerCase();
      if (answer === 'y' || answer === 'yes') {
        await removeDuplicates(actualDuplicates);
      } else {
        console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        process.exit(0);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

async function removeDuplicates(duplicates) {
  console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π...');
  
  for (const group of duplicates) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const toKeep = group[0];
    const toDelete = group.slice(1);
    
    console.log(`\nüìñ –û—Å—Ç–∞–≤–ª—è–µ–º: "${toKeep.title}" (ID: ${toKeep.id})`);
    
    for (const book of toDelete) {
      console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º: "${book.title}" (ID: ${book.id})`);
      
      const { error } = await supabase
        .from('books')
        .delete()
        .eq('id', book.id);
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
      } else {
        console.log(`‚úÖ –ö–Ω–∏–≥–∞ ${book.id} —É–¥–∞–ª–µ–Ω–∞`);
      }
    }
  }
  
  console.log('\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  process.exit(0);
}

checkDuplicates();