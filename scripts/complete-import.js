#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */

/**
 * –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ö–ù–ò–ì –ò–ó GOOGLE SHEETS
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
 * 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
 * 3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫–∏ —Å Google Drive –≤ Cloudinary
 * 4. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–ª–æ–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
const { google } = require('googleapis');
const { createClient } = require('@supabase/supabase-js');
const { v2: cloudinary } = require('cloudinary');
const fs = require('fs');
const path = require('path');
const https = require('https');
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets API
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
});

const sheets = google.sheets({ version: 'v4', auth });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
 */
async function fetchGoogleSheetsData(spreadsheetId, range) {
  try {
    console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...`);
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: spreadsheetId,
      range: range,
    });
    
    return response.data.values;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    return null;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Google Drive URL –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
function convertGoogleDriveUrl(url) {
  if (!url || !url.includes('drive.google.com')) {
    return null;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º file ID –∏–∑ URL
  const fileIdMatch = url.match(/\/file\/d\/([a-zA-Z0-9_-]+)/);
  if (!fileIdMatch) {
    return null;
  }
  
  const fileId = fileIdMatch[1];
  return `https://drive.google.com/uc?export=download&id=${fileId}`;
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive
 */
function downloadFile(url, destination) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(destination);
    
    const request = https.get(url, (response) => {
      if (response.statusCode === 302 || response.statusCode === 301) {
        const redirectUrl = response.headers.location;
        console.log(`   –°–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—É: ${redirectUrl}`);
        
        const redirectRequest = https.get(redirectUrl, (redirectResponse) => {
          redirectResponse.pipe(file);
          
          file.on('finish', () => {
            file.close();
            resolve(destination);
          });
        });
        
        redirectRequest.on('error', reject);
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve(destination);
      });
    });
    
    request.on('error', (error) => {
      reject(error);
    });
  });
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
 */
async function uploadToCloudinary(filePath, publicId) {
  try {
    const result = await cloudinary.uploader.upload(filePath, {
      public_id: `stefa-books/${publicId}`,
      folder: 'stefa-books',
      resource_type: 'image',
      transformation: [
        { width: 300, height: 400, crop: 'fill', quality: 'auto' }
      ]
    });
    
    return result.secure_url;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:`, error.message);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
function cleanupTempFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
  } catch {
    console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –∫–Ω–∏–≥–∏
 */
async function processBookCover(book, index, total) {
  console.log(`\nüìñ [${index + 1}/${total}] ${book.title}`);
  console.log(`   –ö–æ–¥: ${book.code}`);
  
  if (!book.coverUrl) {
    console.log('   ‚ö†Ô∏è  –ù–µ—Ç URL –¥–ª—è –æ–±–ª–æ–∂–∫–∏');
    return null;
  }
  
  try {
    // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Google Drive URL
    const downloadUrl = convertGoogleDriveUrl(book.coverUrl);
    if (!downloadUrl) {
      console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ñ–∞–π–ª–∞ –∏–∑ Google Drive URL');
      return null;
    }
    
    console.log(`   üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å Google Drive...`);
    
    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const fileExtension = '.jpg';
    const tempFilePath = path.join(tempDir, `${book.code}${fileExtension}`);
    
    // 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await downloadFile(downloadUrl, tempFilePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(tempFilePath);
    if (stats.size < 1000) {
      console.log('   ‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      cleanupTempFile(tempFilePath);
      return null;
    }
    
    console.log(`   üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Cloudinary...`);
    
    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Cloudinary
    const cloudinaryUrl = await uploadToCloudinary(tempFilePath, book.code.toLowerCase());
    
    if (cloudinaryUrl) {
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${cloudinaryUrl}`);
    }
    
    // 5. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    cleanupTempFile(tempFilePath);
    
    return cloudinaryUrl;
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function importBooksToDatabase(books) {
  console.log(`\nüìö –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${books.length} –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
  
  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('   üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    await supabase.from('book_authors').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('books').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('authors').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏
    const booksToInsert = books.map(book => {
      // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const cleanBook = {
        code: String(book.code || `BOOK${Math.random().toString(36).substr(2, 9)}`),
        title: String(book.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'),
        author: String(book.author || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä'),
        category: String(book.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        description: book.description ? String(book.description) : null,
        isbn: book.isbn ? String(book.isbn) : null,
        pages: book.pages && !isNaN(parseInt(book.pages)) ? parseInt(book.pages) : null,
        age_range: book.ageRange ? String(book.ageRange) : null,
        language: String(book.language || 'uk'),
        publisher: book.publisher ? String(book.publisher) : null,
        publication_year: book.year && !isNaN(parseInt(book.year)) ? parseInt(book.year) : null,
        cover_url: book.coverUrl ? String(book.coverUrl) : null,
        status: book.status === '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' ? 'available' : 'unavailable',
        available: book.status === '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞',
        qty_total: book.qtyTotal && !isNaN(parseInt(book.qtyTotal)) ? parseInt(book.qtyTotal) : 1,
        qty_available: book.qtyAvailable && !isNaN(parseInt(book.qtyAvailable)) ? parseInt(book.qtyAvailable) : 1,
        price_uah: book.price && !isNaN(parseFloat(book.price)) ? parseFloat(book.price) : null,
        location: '–≤—É–ª. –ú–∞—Ä—ñ—É–ø–æ–ª—å—Å—å–∫–∞ 13/2, –ú–∏–∫–æ–ª–∞—ó–≤',
        rating: null,
        rating_count: 0,
        badges: [],
        tags: null,
        search_text: `${book.title} ${book.author} ${book.category}`,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      return cleanBook;
    });
    
    console.log(`   üìù –ì–æ—Ç–æ–≤–∏–º –∫ –≤—Å—Ç–∞–≤–∫–µ ${booksToInsert.length} –∫–Ω–∏–≥`);
    
    const { data: insertedBooks, error: booksError } = await supabase
      .from('books')
      .insert(booksToInsert)
      .select('id, code, title, author');
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥:', booksError.message);
      return null;
    }
    
    console.log(`   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${insertedBooks.length} –∫–Ω–∏–≥`);
    
    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
    const uniqueAuthors = [...new Set(books.map(book => book.author).filter(Boolean))];
    const authorsToInsert = uniqueAuthors.map(name => ({
      name: name,
      created_at: new Date().toISOString()
    }));
    
    const { data: insertedAuthors, error: authorsError } = await supabase
      .from('authors')
      .insert(authorsToInsert)
      .select('id, name');
    
    if (authorsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ—Ä–æ–≤:', authorsError.message);
      return null;
    }
    
    console.log(`   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${insertedAuthors.length} –∞–≤—Ç–æ—Ä–æ–≤`);
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    const bookAuthorsToInsert = [];
    for (const book of insertedBooks) {
      const author = insertedAuthors.find(a => a.name === book.author);
      if (author) {
        bookAuthorsToInsert.push({
          book_id: book.id,
          author_id: author.id,
          role: 'author'
        });
      }
    }
    
    const { error: bookAuthorsError } = await supabase
      .from('book_authors')
      .insert(bookAuthorsToInsert);
    
    if (bookAuthorsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏:', bookAuthorsError.message);
      return null;
    }
    
    console.log(`   ‚úÖ –°–≤—è–∑–∞–Ω–æ ${bookAuthorsToInsert.length} –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏`);
    
    return insertedBooks;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function updateCoverUrl(bookCode, newUrl) {
  try {
    const { error } = await supabase
      .from('books')
      .update({ cover_url: newUrl })
      .eq('code', bookCode);
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookCode}:`, error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookCode}:`, error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ö–ù–ò–ì –ò–ó GOOGLE SHEETS');
  console.log('=' .repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
      process.exit(1);
    }
    
    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Cloudinary');
      process.exit(1);
    }
    
    if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GOOGLE_APPLICATION_CREDENTIALS');
      process.exit(1);
    }
    
    console.log(`‚úÖ Supabase: ${process.env.SUPABASE_URL}`);
    console.log(`‚úÖ Cloudinary: ${process.env.CLOUDINARY_CLOUD_NAME}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
    const range = process.env.GOOGLE_RANGE || 'Sheet1!A:Z';
    
    if (!spreadsheetId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GOOGLE_SPREADSHEET_ID');
      process.exit(1);
    }
    
    const data = await fetchGoogleSheetsData(spreadsheetId, range);
    
    if (!data || data.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã –∫–Ω–∏–≥
    const headers = data[0];
    const rows = data.slice(1);
    
    const books = rows.map((row, index) => {
      const book = {};
      headers.forEach((header, headerIndex) => {
        book[header] = row[headerIndex] || null;
      });
      
      // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Google —Ç–∞–±–ª–∏—Ü—ã)
      return {
        code: book['–ö–æ–¥'] || `BOOK${index + 1}`,
        title: book['–ù–∞–∑–≤–∞'] || `–ö–Ω–∏–≥–∞ ${index + 1}`,
        author: book['–ê–≤—Ç–æ—Ä'] || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä',
        category: book['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
        description: book['–û–ø–∏—Å'] || null,
        isbn: book['ISBN'] || null,
        pages: book['–°—Ç–æ—Ä—ñ–Ω–∫–∏'] || null,
        ageRange: book['–í—ñ–∫'] || null,
        language: book['–ú–æ–≤–∞'] || 'uk',
        publisher: book['–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ'] || null,
        year: book['–†—ñ–∫'] || null,
        coverUrl: book['–§–æ—Ç–æ (URL)'] || null,
        price: book['–¶—ñ–Ω–∞'] || null,
        qtyTotal: book['–í—Å—å–æ–≥–æ'] || 1,
        qtyAvailable: book['–î–æ—Å—Ç—É–ø–Ω–æ'] || 1,
        status: book['–°—Ç–∞—Ç—É—Å'] || '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞'
      };
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–¥—É
    const uniqueBooks = [];
    const seenCodes = new Set();
    
    books.forEach(book => {
      if (!seenCodes.has(book.code)) {
        seenCodes.add(book.code);
        uniqueBooks.push(book);
      } else {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${book.code} - ${book.title}`);
      }
    });
    
    console.log(`üìö –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${uniqueBooks.length} –∫–Ω–∏–≥`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const importedBooks = await importBooksToDatabase(uniqueBooks);
    
    if (!importedBooks) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫–∏
    const booksWithCovers = uniqueBooks.filter(book => book.coverUrl);
    console.log(`\nüñºÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${booksWithCovers.length} –æ–±–ª–æ–∂–µ–∫...`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < booksWithCovers.length; i++) {
      const book = booksWithCovers[i];
      const cloudinaryUrl = await processBookCover(book, i, booksWithCovers.length);
      
      if (cloudinaryUrl) {
        const updated = await updateCoverUrl(book.code, cloudinaryUrl);
        if (updated) {
          successCount++;
        } else {
          errorCount++;
        }
      } else {
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < booksWithCovers.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultData = {
      timestamp: new Date().toISOString(),
      totalBooks: uniqueBooks.length,
      importedBooks: importedBooks.length,
      totalCovers: booksWithCovers.length,
      successfulCovers: successCount,
      failedCovers: errorCount,
      books: uniqueBooks.map(book => ({
        code: book.code,
        title: book.title,
        author: book.author,
        hasCover: !!book.coverUrl
      }))
    };
    
    fs.writeFileSync('import-results.json', JSON.stringify(resultData, null, 2));
    
    console.log('\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('=' .repeat(60));
    console.log(`üìö –ö–Ω–∏–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedBooks.length}`);
    console.log(`üñºÔ∏è  –û–±–ª–æ–∂–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${booksWithCovers.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: import-results.json`);
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };

/* eslint-enable @typescript-eslint/no-var-requires */
