const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env.local' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–∏–≥–∞–º–∏
const categoryMappings = [
  {
    keywords: ['–∫–∞–∑–∫', '–∫–∞–∑–∫–∞', '–ø—Ä–∏–Ω—Ü–µ—Å', '–∫–æ—Ä–æ–ª—å', '—á–∞—Ä—ñ–≤–Ω'],
    categoryNames: ['–ö–∞–∑–∫–∞', '–∫–∞–∑–∫–∏'],
    preferredCategory: 'cat-7' // "–ö–∞–∑–∫–∞, –¥–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫"
  },
  {
    keywords: ['–ø—Ä–∏–≥–æ–¥', '–ø–æ–¥–æ—Ä–æ–∂', '–º–∞–Ω–¥—Ä'],
    categoryNames: ['–ü—Ä–∏–≥–æ–¥–∏'],
    preferredCategory: 'cat-4' // "–ü—Ä–∏–≥–æ–¥–∏, —Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫"
  },
  {
    keywords: ['—Ñ–µ–Ω—Ç–µ–∑', '–º–∞–≥—ñ', '—á–∞—Ä—ñ–≤', '–¥—Ä–∞–∫–æ–Ω'],
    categoryNames: ['–§–µ–Ω—Ç–µ–∑—ñ'],
    preferredCategory: 'cat-5' // "–§–µ–Ω—Ç–µ–∑—ñ, –ø—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫"
  },
  {
    keywords: ['–¥–µ—Ç–µ–∫—Ç–∏–≤', '–∑–∞–≥–∞–¥–∫', '—Ç–∞—î–º–Ω–∏—á', '–∑–ª–æ—á–∏–Ω'],
    categoryNames: ['–¥–µ—Ç–µ–∫—Ç–∏–≤'],
    preferredCategory: 'cat-8' // "–ü—Ä–∏–≥–æ–¥–∏, –¥–µ—Ç–µ–∫—Ç–∏–≤, –º–æ–ª–æ–¥—à–∏–π –≤—ñ–∫"
  },
  {
    keywords: ['–ø—Å–∏—Ö–æ–ª–æ–≥', '—Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç', '–µ–º–æ—Ü—ñ', '–≤—ñ–¥–Ω–æ—Å–∏–Ω'],
    categoryNames: ['–ø—Å–∏—Ö–æ–ª–æ–≥'],
    preferredCategory: 'cat-3' // "–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫" (–±–ª–∏–∑—å–∫–æ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏)
  },
  {
    keywords: ['–µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥—ñ', '–ø—ñ–∑–Ω–∞–≤–∞–ª—å', '–Ω–∞–≤—á–∞–ª—å–Ω', '–∑–Ω–∞–Ω–Ω'],
    categoryNames: ['–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ'],
    preferredCategory: 'cat-2' // "–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ, –º–æ–ª–æ–¥—à–∏–π –≤—ñ–∫"
  },
  {
    keywords: ['—Ä–æ–º–∞–Ω—Ç–∏–∫', '–∫–æ—Ö–∞–Ω', '—Å–µ—Ä—Ü'],
    categoryNames: ['—Ä–æ–º–∞–Ω—Ç–∏–∫–∞'],
    preferredCategory: 'cat-6' // "–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞"
  }
];

async function assignBookCategories() {
  try {
    console.log('üìö –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, description, category_id');

    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: ${booksError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name');

    if (categoriesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesError.message}`);
    }

    console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${books.length} –∫–Ω–∏–≥`);
    console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n`);

    let assigned = 0;
    let alreadyAssigned = 0;
    const assignments = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    for (const book of books) {
      if (book.category_id) {
        alreadyAssigned++;
        continue;
      }

      const bookText = `${book.title} ${book.author} ${book.description || ''}`.toLowerCase();
      let bestCategory = null;
      let bestScore = 0;

      // –ò—â–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      for (const mapping of categoryMappings) {
        let score = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∫–Ω–∏–≥–∏
        for (const keyword of mapping.keywords) {
          if (bookText.includes(keyword.toLowerCase())) {
            score += 2; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        for (const categoryName of mapping.categoryNames) {
          if (bookText.includes(categoryName.toLowerCase())) {
            score += 3; // –ï—â–µ –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
          }
        }

        if (score > bestScore) {
          bestScore = score;
          bestCategory = mapping.preferredCategory;
        }
      }

      if (bestCategory && bestScore > 0) {
        assignments.push({
          bookId: book.id,
          bookTitle: book.title,
          categoryId: bestCategory,
          categoryName: categories.find(c => c.id === bestCategory)?.name || 'Unknown',
          score: bestScore
        });
        assigned++;
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
    console.log(`   ‚úÖ –ö–Ω–∏–≥ —É–∂–µ –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${alreadyAssigned}`);
    console.log(`   üîÑ –ö–Ω–∏–≥ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${assigned}`);
    console.log(`   ‚ùì –ö–Ω–∏–≥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${books.length - alreadyAssigned - assigned}\n`);

    if (assignments.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    console.log('üîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:');
    assignments.slice(0, 10).forEach(a => {
      console.log(`   "${a.bookTitle}" ‚Üí ${a.categoryName} (score: ${a.score})`);
    });

    if (assignments.length > 10) {
      console.log(`   ... –∏ –µ—â–µ ${assignments.length - 10} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π\n`);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    console.log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...');
    let successCount = 0;

    for (const assignment of assignments) {
      try {
        const { error } = await supabase
          .from('books')
          .update({ category_id: assignment.categoryId })
          .eq('id', assignment.bookId);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "${assignment.bookTitle}": ${error.message}`);
        } else {
          successCount++;
          if (successCount % 10 === 0) {
            console.log(`   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ ${successCount}/${assignments.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
          }
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è "${assignment.bookTitle}": ${err.message}`);
      }
    }

    console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${successCount} –∏–∑ ${assignments.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: updatedBooks, error: checkError } = await supabase
      .from('books')
      .select('category_id')
      .not('category_id', 'is', null);

    if (!checkError) {
      console.log(`üìà –ò—Ç–æ–≥–æ –∫–Ω–∏–≥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${updatedBooks.length}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
assignBookCategories();