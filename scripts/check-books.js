#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

async function getBooks() {
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/books?select=code,title,author,category&order=code`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const books = await response.json();
    return books;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error.message);
    return [];
  }
}

async function getBooksCount() {
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/books?select=*&limit=1`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Prefer': 'count=exact'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const count = response.headers.get('content-range');
    return count ? parseInt(count.split('/')[1]) : 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', error.message);
    return 0;
  }
}

async function main() {
  console.log('üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
  
  const count = await getBooksCount();
  console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: ${count}\n`);
  
  const books = await getBooks();
  
  if (books.length === 0) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥');
    return;
  }
  
  console.log('üìñ –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const booksByCategory = {};
  books.forEach(book => {
    if (!booksByCategory[book.category]) {
      booksByCategory[book.category] = [];
    }
    booksByCategory[book.category].push(book);
  });
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Object.keys(booksByCategory).sort().forEach(category => {
    console.log(`\nüìÇ ${category} (${booksByCategory[category].length} –∫–Ω–∏–≥):`);
    booksByCategory[category].forEach(book => {
      console.log(`  ${book.code} - ${book.title} (${book.author})`);
    });
  });
  
  console.log(`\nüìä –ò—Ç–æ–≥–æ: ${books.length} –∫–Ω–∏–≥ –≤ ${Object.keys(booksByCategory).length} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
  const ourCodes = [
    'PL-001', 'PL-002', 'PL-003', 'NP-001', 'KL-001', 'DL-001', 'DL-002', 
    'KP-001', 'DL-003', 'KP-002', 'KP-003', 'DL-004', 'DL-005', 'IL-001', 
    'DL-006', 'DL-007', 'KL-002', 'DL-008', 'NP-002', 'PD-001', 'DL-009'
  ];
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—à–∏—Ö –∫–æ–¥–æ–≤:');
  const existingCodes = books.map(book => book.code);
  const missingCodes = ourCodes.filter(code => !existingCodes.includes(code));
  const existingOurCodes = ourCodes.filter(code => existingCodes.includes(code));
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–∏—Ö –∫–æ–¥–æ–≤: ${existingOurCodes.length}/${ourCodes.length}`);
  if (existingOurCodes.length > 0) {
    console.log('   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:', existingOurCodes.join(', '));
  }
  
  if (missingCodes.length > 0) {
    console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã: ${missingCodes.length}`);
    console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ:', missingCodes.join(', '));
  } else {
    console.log('üéâ –í—Å–µ –Ω–∞—à–∏ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { getBooks, getBooksCount };
