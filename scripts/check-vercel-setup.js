#!/usr/bin/env node

/**
 * üîç –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Vercel
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/check-vercel-setup.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const check = (name, condition, message) => {
  if (condition) {
    log(`‚úÖ ${name}: ${message}`, 'green');
    return true;
  } else {
    log(`‚ùå ${name}: ${message}`, 'red');
    return false;
  }
};

const warning = (name, message) => {
  log(`‚ö†Ô∏è  ${name}: ${message}`, 'yellow');
};

const main = () => {
  log('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Vercel\n', 'bold');

  let allChecksPassed = true;

  // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json
  log('üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json...', 'blue');
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    allChecksPassed &= check(
      'Package name',
      packageJson.name && packageJson.name !== 'undefined',
      `"${packageJson.name}"`
    );
    
    allChecksPassed &= check(
      'Build script',
      packageJson.scripts && packageJson.scripts.build,
      '–ù–∞—è–≤–Ω–∏–π'
    );
    
    allChecksPassed &= check(
      'Start script',
      packageJson.scripts && packageJson.scripts.start,
      '–ù–∞—è–≤–Ω–∏–π'
    );
    
    allChecksPassed &= check(
      'Next.js dependency',
      packageJson.dependencies && packageJson.dependencies.next,
      `v${packageJson.dependencies.next}`
    );
    
    allChecksPassed &= check(
      'React dependency',
      packageJson.dependencies && packageJson.dependencies.react,
      `v${packageJson.dependencies.react}`
    );
    
  } catch (error) {
    allChecksPassed = false;
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è package.json: ${error.message}`, 'red');
  }

  // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ next.config.js
  log('\n‚öôÔ∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ next.config.js...', 'blue');
  try {
    const nextConfigExists = fs.existsSync('next.config.js');
    allChecksPassed &= check(
      'Next.js config',
      nextConfigExists,
      nextConfigExists ? '–ó–Ω–∞–π–¥–µ–Ω–æ' : '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    );
    
    if (nextConfigExists) {
      const nextConfig = fs.readFileSync('next.config.js', 'utf8');
      allChecksPassed &= check(
        'Image optimization',
        nextConfig.includes('images:'),
        '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
      );
    }
  } catch (error) {
    allChecksPassed = false;
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ next.config.js: ${error.message}`, 'red');
  }

  // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ vercel.json
  log('\nüöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ vercel.json...', 'blue');
  try {
    const vercelConfigExists = fs.existsSync('vercel.json');
    allChecksPassed &= check(
      'Vercel config',
      vercelConfigExists,
      vercelConfigExists ? '–ó–Ω–∞–π–¥–µ–Ω–æ' : '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    );
    
    if (vercelConfigExists) {
      const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
      allChecksPassed &= check(
        'Vercel version',
        vercelConfig.version === 2,
        `v${vercelConfig.version}`
      );
    }
  } catch (error) {
    allChecksPassed = false;
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ vercel.json: ${error.message}`, 'red');
  }

  // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript
  log('\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript...', 'blue');
  try {
    execSync('npx tsc --noEmit', { stdio: 'pipe' });
    allChecksPassed &= check(
      'TypeScript compilation',
      true,
      '–ë–µ–∑ –ø–æ–º–∏–ª–æ–∫'
    );
  } catch (error) {
    allChecksPassed = false;
    log(`‚ùå –ü–æ–º–∏–ª–∫–∏ TypeScript: ${error.message}`, 'red');
  }

  // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ESLint
  log('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ESLint...', 'blue');
  try {
    execSync('npx next lint', { stdio: 'pipe' });
    allChecksPassed &= check(
      'ESLint',
      true,
      '–ë–µ–∑ –ø–æ–º–∏–ª–æ–∫'
    );
  } catch (error) {
    warning(
      'ESLint',
      '–Ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏'
    );
  }

  // 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .gitignore
  log('\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .gitignore...', 'blue');
  try {
    const gitignore = fs.readFileSync('.gitignore', 'utf8');
    allChecksPassed &= check(
      'Environment files ignored',
      gitignore.includes('.env') && gitignore.includes('.env.local'),
      '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
    );
    
    allChecksPassed &= check(
      'Next.js build ignored',
      gitignore.includes('.next'),
      '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
    );
    
    allChecksPassed &= check(
      'Node modules ignored',
      gitignore.includes('node_modules'),
      '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
    );
  } catch (error) {
    allChecksPassed = false;
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ .gitignore: ${error.message}`, 'red');
  }

  // 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
  log('\nüèóÔ∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...', 'blue');
  const requiredDirs = ['src/app', 'src/components', 'src/lib', 'public'];
  const requiredFiles = ['src/app/layout.tsx', 'src/app/page.tsx', 'src/app/globals.css'];
  
  requiredDirs.forEach(dir => {
    allChecksPassed &= check(
      `Directory ${dir}`,
      fs.existsSync(dir),
      fs.existsSync(dir) ? '–Ü—Å–Ω—É—î' : '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    );
  });
  
  requiredFiles.forEach(file => {
    allChecksPassed &= check(
      `File ${file}`,
      fs.existsSync(file),
      fs.existsSync(file) ? '–Ü—Å–Ω—É—î' : '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    );
  });

  // 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  log('\nüîë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...', 'blue');
  const requiredEnvVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME',
    'CLOUDINARY_API_KEY',
    'CLOUDINARY_API_SECRET',
    'NEXT_PUBLIC_SITE_URL'
  ];
  
  let envVarsConfigured = 0;
  requiredEnvVars.forEach(envVar => {
    if (process.env[envVar]) {
      envVarsConfigured++;
    }
  });
  
  if (envVarsConfigured === requiredEnvVars.length) {
    allChecksPassed &= check(
      'Environment variables',
      true,
      `–í—Å—ñ ${requiredEnvVars.length} –∑–º—ñ–Ω–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ`
    );
  } else {
    warning(
      'Environment variables',
      `–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ ${envVarsConfigured} –∑ ${requiredEnvVars.length} –∑–º—ñ–Ω–Ω–∏—Ö`
    );
    log('   –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –≤ Vercel Dashboard', 'yellow');
  }

  // 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å—É
  log('\nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å—É...', 'blue');
  try {
    const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
    if (gitStatus.trim() === '') {
      allChecksPassed &= check(
        'Git status',
        true,
        '–í—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ'
      );
    } else {
      warning(
        'Git status',
        '–Ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏'
      );
      log('   –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º', 'yellow');
    }
  } catch (error) {
    warning('Git status', '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Git');
  }

  // –ü—ñ–¥—Å—É–º–æ–∫
  log('\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', 'bold');
  if (allChecksPassed) {
    log('üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Vercel.', 'green');
    log('\nüöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:', 'blue');
    log('   1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤ Vercel Dashboard');
    log('   2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: ./scripts/vercel-deploy.sh');
    log('   3. –ê–±–æ: vercel --prod');
  } else {
    log('‚ö†Ô∏è  –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º.', 'yellow');
    log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:', 'blue');
    log('   1. –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ TypeScript —Ç–∞ ESLint');
    log('   2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
    log('   3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞');
    log('   4. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –∑–º—ñ–Ω–∏ –≤ Git');
  }

  log('\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: VERCEL_DEPLOYMENT_GUIDE.md', 'blue');
  
  process.exit(allChecksPassed ? 0 : 1);
};

main();
