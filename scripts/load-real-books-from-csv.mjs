#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/load-real-books-from-csv.mjs
 */

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import { parse } from 'csv-parse/sync'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
let categoriesMap = new Map()

async function loadCategories() {
  console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
  
  const { data: categories, error } = await supabase
    .from('categories')
    .select('*')
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message)
    return
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  categories.forEach(category => {
    categoriesMap.set(category.name.toLowerCase(), category.id)
    
    if (category.subcategories) {
      category.subcategories.forEach(sub => {
        categoriesMap.set(sub.name.toLowerCase(), sub.id)
      })
    }
  })
  
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoriesMap.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)
}

function findCategoryId(categoryString) {
  if (!categoryString) return null
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –∏—â–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
  const parts = categoryString.split(',').map(part => part.trim().toLowerCase())
  
  for (const part of parts) {
    for (const [name, id] of categoriesMap) {
      if (name.includes(part) || part.includes(name)) {
        return id
      }
    }
  }
  
  return null
}

function processBookData(row) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
  const code = row['–ö–æ–¥'] || ''
  const title = row['–ù–∞–∑–≤–∞'] || ''
  const author = row['–ê–≤—Ç–æ—Ä'] || ''
  const publisher = row['–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ'] || ''
  const category = row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'] || ''
  const totalQty = parseInt(row['–í—Å—å–æ–≥–æ'] || '1')
  const availableQty = parseInt(row['–î–æ—Å—Ç—É–ø–Ω–æ'] || '1')
  const status = row['–°—Ç–∞—Ç—É—Å'] || ''
  const price = parseFloat(row['–¶—ñ–Ω–∞'] || '0')
  const fullPrice = parseFloat(row['–ü–æ–≤–Ω–∞ —Ü—ñ–Ω–∞'] || '0')
  const coverUrl = row['cover_url'] || ''
  const description = row['–û–ø–∏—Å'] || ''
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const isActive = status.includes('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞') || status.includes('–ê–∫—Ç–∏–≤–Ω–∞')
  const isAvailable = availableQty > 0 && isActive
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const categoryId = findCategoryId(category)
  
  return {
    code: code,
    title: title,
    author: author,
    category_id: categoryId,
    qty_total: totalQty,
    qty_available: availableQty,
    available: isAvailable,
    price_uah: price,
    cover_url: coverUrl,
    description: description,
    isbn: null, // –í CSV –Ω–µ—Ç ISBN, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    age_range: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    short_description: description ? description.substring(0, 200) + '...' : null,
    location: null // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
  }
}

async function cleanExistingBooks() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥...')
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
  const { error: deleteError } = await supabase
    .from('books')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000') // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
  
  if (deleteError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥:', deleteError.message)
    return false
  }
  
  console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏ —É–¥–∞–ª–µ–Ω—ã')
  return true
}

async function loadBooksFromCSV() {
  try {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ CSV —Ñ–∞–π–ª–∞...')
    console.log('=' .repeat(60))
    
    const csvFilePath = '/Users/fantomas/Downloads/Stefa.books - –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥.csv'
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await loadCategories()
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
    const cleaned = await cleanExistingBooks()
    if (!cleaned) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏')
      return
    }
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...')
    const csvContent = readFileSync(csvFilePath, 'utf-8')
    
    // –ü–∞—Ä—Å–∏–º CSV
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–∞–Ω–Ω—ã—Ö...')
    const records = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV`)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
    const books = records.map(processBookData)
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–¥–∞–º–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    const validBooks = books.filter(book => book.code && book.title)
    
    console.log(`üìã –í–∞–ª–∏–¥–Ω—ã—Ö –∫–Ω–∏–≥: ${validBooks.length}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
    validBooks.slice(0, 5).forEach((book, index) => {
      console.log(`\n–ö–Ω–∏–≥–∞ ${index + 1}:`)
      console.log(`  –ö–æ–¥: ${book.code}`)
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`)
      console.log(`  –ê–≤—Ç–æ—Ä: ${book.author}`)
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${book.category_id ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞'}`)
      console.log(`  –¶–µ–Ω–∞: ${book.price_uah} ‚Ç¥`)
      console.log(`  –ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: ${book.full_price_uah} ‚Ç¥`)
      console.log(`  –í—Å–µ–≥–æ: ${book.qty_total}`)
      console.log(`  –î–æ—Å—Ç—É–ø–Ω–æ: ${book.qty_available}`)
      console.log(`  –°—Ç–∞—Ç—É—Å: ${book.status}`)
    })
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ —á–∞—Å—Ç—è–º
    console.log(`\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ ${validBooks.length} –∫–Ω–∏–≥...`)
    
    const batchSize = 20
    let successCount = 0
    let errorCount = 0
    
    for (let i = 0; i < validBooks.length; i += batchSize) {
      const batch = validBooks.slice(i, i + batchSize)
      console.log(`üì¶ –ü–∞—Ä—Ç–∏—è ${Math.floor(i / batchSize) + 1}/${Math.ceil(validBooks.length / batchSize)} (${batch.length} –∫–Ω–∏–≥)`)
      
      try {
        const { error: insertError } = await supabase
          .from('books')
          .insert(batch)
        
        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, insertError.message)
          errorCount += batch.length
        } else {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${batch.length} –∫–Ω–∏–≥`)
          successCount += batch.length
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, error.message)
        errorCount += batch.length
      }
    }
    
    console.log(`\nüìö –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ‚úÖ ${successCount} —É—Å–ø–µ—à–Ω–æ, ‚ùå ${errorCount} –æ—à–∏–±–æ–∫`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: finalBooks } = await supabase
      .from('books')
      .select('*')
    
    console.log(`\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${finalBooks.length}`)
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const activeBooks = finalBooks.filter(book => book.status === 'active').length
    const availableBooks = finalBooks.filter(book => book.available).length
    const booksWithCategory = finalBooks.filter(book => book.category_id).length
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–∏–≥: ${activeBooks}`)
    console.log(`  üìñ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥: ${availableBooks}`)
    console.log(`  üè∑Ô∏è  –° –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${booksWithCategory}`)
    console.log(`  ‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${finalBooks.length - booksWithCategory}`)
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
    const booksWithPrice = finalBooks.filter(book => book.price_uah > 0).length
    const totalValue = finalBooks.reduce((sum, book) => sum + (book.price_uah || 0), 0)
    const avgPrice = booksWithPrice > 0 ? totalValue / booksWithPrice : 0
    
    console.log(`\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`  üíµ –ö–Ω–∏–≥ —Å —Ü–µ–Ω–æ–π: ${booksWithPrice}`)
    console.log(`  üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalValue.toLocaleString('uk-UA')} ‚Ç¥`)
    console.log(`  üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice.toFixed(2)} ‚Ç¥`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const booksWithoutCategory = finalBooks.filter(book => !book.category_id)
    if (booksWithoutCategory.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ö–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (${booksWithoutCategory.length}):`)
      booksWithoutCategory.slice(0, 5).forEach(book => {
        console.log(`  - ${book.title} (${book.code})`)
      })
      if (booksWithoutCategory.length > 5) {
        console.log(`  ... –∏ –µ—â–µ ${booksWithoutCategory.length - 5} –∫–Ω–∏–≥`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
loadBooksFromCSV()
