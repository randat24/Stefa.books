const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function updateSubcategory() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º subcategory...');
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º subcategory –¥–ª—è –≤—Å–µ—Ö –∫–Ω–∏–≥
    const { data, error } = await supabase.rpc('exec_sql', {
      sql_query: `
        UPDATE books SET 
          subcategory = '–°–∫–∞–∑–∫–∏'
        WHERE subcategory IS NULL OR subcategory = '';
      `
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ subcategory:', error);
    } else {
      console.log('‚úÖ Subcategory –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: books, error: checkError } = await supabase
      .from('books')
      .select('id, title, author, category, subcategory')
      .limit(5);
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', checkError);
    } else {
      console.log('üìö –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      books.forEach(book => {
        console.log(`   - "${book.title}" by ${book.author} [${book.category} - ${book.subcategory}]`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

updateSubcategory();
