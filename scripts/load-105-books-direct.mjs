#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ 105 –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/load-105-books-direct.mjs
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
let categoriesMap = new Map()

async function loadCategories() {
  console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
  
  const { data: categories, error } = await supabase
    .from('categories')
    .select('*')
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message)
    return
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  categories.forEach(category => {
    categoriesMap.set(category.name.toLowerCase(), category.id)
    
    if (category.subcategories) {
      category.subcategories.forEach(sub => {
        categoriesMap.set(sub.name.toLowerCase(), sub.id)
      })
    }
  })
  
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoriesMap.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)
}

function findCategoryId(categoryString) {
  if (!categoryString) return null
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –∏—â–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
  const parts = categoryString.split(',').map(part => part.trim().toLowerCase())
  
  for (const part of parts) {
    for (const [name, id] of categoriesMap) {
      if (name.includes(part) || part.includes(name)) {
        return id
      }
    }
  }
  
  return null
}

// –î–∞–Ω–Ω—ã–µ 105 –∫–Ω–∏–≥
const booksData = [
  {
    title: '–ü—Ä–∏–≥–æ–¥–∏ –¢–æ–º–∞ –°–æ–π—î—Ä–∞',
    author: '–ú–∞—Ä–∫ –¢–≤–µ–Ω',
    isbn: '978-617-12-3456-7',
    description: '–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–º–∞–Ω –ø—Ä–æ –ø—Ä–∏–≥–æ–¥–∏ —Ö–ª–æ–ø—á–∏–∫–∞ –¢–æ–º–∞ –°–æ–π—î—Ä–∞',
    cover_url: 'https://res.cloudinary.com/your-cloud/image/upload/v1234567890/tom-sawyer.jpg',
    category: '–ü—Ä–∏–≥–æ–¥–∏, –º–æ–ª–æ–¥—à–∏–π –≤—ñ–∫',
    available: true,
    code: 'SB-2025-0001'
  },
  {
    title: '–ê–ª—ñ—Å–∞ –≤ –ö—Ä–∞—ó–Ω—ñ –ß—É–¥–µ—Å',
    author: '–õ—å—é—ó—Å –ö–µ—Ä—Ä–æ–ª–ª',
    isbn: '978-617-12-3457-4',
    description: '–ö–∞–∑–∫–æ–≤–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ –¥—ñ–≤—á–∏–Ω–∫—É –ê–ª—ñ—Å—É',
    cover_url: 'https://res.cloudinary.com/your-cloud/image/upload/v1234567890/alice.jpg',
    category: '–ö–∞–∑–∫–∏, –¥–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫',
    available: true,
    code: 'SB-2025-0002'
  },
  {
    title: '–ì–∞—Ä—Ä—ñ –ü–æ—Ç—Ç–µ—Ä —ñ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–π –∫–∞–º—ñ–Ω—å',
    author: '–î–∂–æ–∞–Ω –†–æ—É–ª—ñ–Ω–≥',
    isbn: '978-617-12-3458-1',
    description: '–ü–µ—Ä—à–∞ –∫–Ω–∏–≥–∞ –ø—Ä–æ –ø—Ä–∏–≥–æ–¥–∏ –ì–∞—Ä—Ä—ñ –ü–æ—Ç—Ç–µ—Ä–∞',
    cover_url: 'https://res.cloudinary.com/your-cloud/image/upload/v1234567890/harry-potter.jpg',
    category: '–§–µ–Ω—Ç–µ–∑—ñ, –ø—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫',
    available: true,
    code: 'SB-2025-0003'
  },
  {
    title: '–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è',
    author: '–ê–≤—Ç–æ—Ä –î–µ—Ç–µ–∫—Ç–∏–≤',
    isbn: '978-617-12-3459-8',
    description: '–ó–∞—Ö–æ–ø–ª—é—é—á–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
    cover_url: 'https://res.cloudinary.com/your-cloud/image/upload/v1234567890/detective.jpg',
    category: '–î–µ—Ç–µ–∫—Ç–∏–≤, —Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫',
    available: true,
    code: 'SB-2025-0004'
  },
  {
    title: '–ö–∞–∑–∫–∏ –ø—Ä–æ –∑–≤—ñ—Ä—ñ–≤',
    author: '–ê–≤—Ç–æ—Ä –ö–∞–∑–∫–∏',
    isbn: '978-617-12-3460-4',
    description: '–ß–∞—Ä—ñ–≤–Ω—ñ –∫–∞–∑–∫–∏ –ø—Ä–æ —Ç–≤–∞—Ä–∏–Ω',
    cover_url: 'https://res.cloudinary.com/your-cloud/image/upload/v1234567890/animal-tales.jpg',
    category: '–ö–∞–∑–∫–∏, –Ω–∞–π–º–µ–Ω—à—ñ',
    available: true,
    code: 'SB-2025-0005'
  }
  // –î–æ–±–∞–≤–∏–º –µ—â–µ 100 –∫–Ω–∏–≥...
]

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ 100 –∫–Ω–∏–≥
for (let i = 6; i <= 105; i++) {
  const bookNumber = String(i).padStart(3, '0')
  booksData.push({
    title: `–ö–Ω–∏–≥–∞ ${bookNumber}`,
    author: `–ê–≤—Ç–æ—Ä ${bookNumber}`,
    isbn: `978-617-12-${bookNumber}-${i % 10}`,
    description: `–û–ø–∏—Å –∫–Ω–∏–≥–∏ ${bookNumber}`,
    cover_url: `https://res.cloudinary.com/your-cloud/image/upload/v1234567890/book-${bookNumber}.jpg`,
    category: i % 2 === 0 ? '–ö–∞–∑–∫–∏, –¥–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫' : '–ü—Ä–∏–≥–æ–¥–∏, –º–æ–ª–æ–¥—à–∏–π –≤—ñ–∫',
    available: true,
    code: `SB-2025-${bookNumber}`
  })
}

async function loadBooks() {
  try {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ 105 –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
    console.log('=' .repeat(60))
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await loadCategories()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
    const { data: existingBooks } = await supabase
      .from('books')
      .select('code')
    
    const existingCodes = new Set(existingBooks.map(book => book.code))
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏
    const booksToInsert = []
    const booksToUpdate = []
    
    for (const bookData of booksData) {
      const categoryId = findCategoryId(bookData.category)
      
      const book = {
        title: bookData.title,
        author: bookData.author,
        isbn: bookData.isbn,
        description: bookData.description,
        cover_url: bookData.cover_url,
        category_id: categoryId,
        available: bookData.available,
        code: bookData.code,
        qty_total: 1,
        qty_available: 1,
        price_uah: 100 + Math.floor(Math.random() * 400)
      }
      
      if (existingCodes.has(book.code)) {
        booksToUpdate.push(book)
      } else {
        booksToInsert.push(book)
      }
    }
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`  üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${booksData.length}`)
    console.log(`  ‚úÖ –ù–æ–≤—ã—Ö: ${booksToInsert.length}`)
    console.log(`  üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${booksToUpdate.length}`)
    console.log(`  üìö –£–∂–µ –≤ –±–∞–∑–µ: ${existingBooks.length}`)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏
    if (booksToInsert.length > 0) {
      console.log(`\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ ${booksToInsert.length} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥...`)
      
      const batchSize = 20
      let successCount = 0
      let errorCount = 0
      
      for (let i = 0; i < booksToInsert.length; i += batchSize) {
        const batch = booksToInsert.slice(i, i + batchSize)
        console.log(`üì¶ –ü–∞—Ä—Ç–∏—è ${Math.floor(i / batchSize) + 1}/${Math.ceil(booksToInsert.length / batchSize)} (${batch.length} –∫–Ω–∏–≥)`)
        
        try {
          const { error: insertError } = await supabase
            .from('books')
            .insert(batch)
          
          if (insertError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, insertError.message)
            errorCount += batch.length
          } else {
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${batch.length} –∫–Ω–∏–≥`)
            successCount += batch.length
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, error.message)
          errorCount += batch.length
        }
      }
      
      console.log(`\nüìö –ù–æ–≤—ã–µ –∫–Ω–∏–≥–∏: ‚úÖ ${successCount} —É—Å–ø–µ—à–Ω–æ, ‚ùå ${errorCount} –æ—à–∏–±–æ–∫`)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
    if (booksToUpdate.length > 0) {
      console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${booksToUpdate.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥...`)
      
      let successCount = 0
      let errorCount = 0
      
      for (const book of booksToUpdate) {
        try {
          const { error: updateError } = await supabase
            .from('books')
            .update(book)
            .eq('code', book.code)
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${book.title}:`, updateError.message)
            errorCount++
          } else {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${book.title}`)
            successCount++
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${book.title}:`, error.message)
          errorCount++
        }
      }
      
      console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: ‚úÖ ${successCount} —É—Å–ø–µ—à–Ω–æ, ‚ùå ${errorCount} –æ—à–∏–±–æ–∫`)
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: finalBooks } = await supabase
      .from('books')
      .select('*')
    
    console.log(`\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${finalBooks.length}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const booksWithoutCategory = finalBooks.filter(book => !book.category_id)
    if (booksWithoutCategory.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ö–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (${booksWithoutCategory.length}):`)
      booksWithoutCategory.slice(0, 5).forEach(book => {
        console.log(`  - ${book.title} (${book.code})`)
      })
      if (booksWithoutCategory.length > 5) {
        console.log(`  ... –∏ –µ—â–µ ${booksWithoutCategory.length - 5} –∫–Ω–∏–≥`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
loadBooks()
