#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –∏–∑ CSV —Ñ–∞–π–ª–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑ Google Sheets)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/load-books-from-csv.mjs path/to/books.csv
 */

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import { parse } from 'csv-parse/sync'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

function processCategories(categoriesString) {
  if (!categoriesString) return []
  return categoriesString.split(',').map(cat => cat.trim()).filter(cat => cat.length > 0)
}

function processBookData(row) {
  return {
    title: row.title || row['–ù–∞–∑–≤–∞–Ω–∏–µ'] || '',
    author: row.author || row['–ê–≤—Ç–æ—Ä'] || '',
    isbn: row.isbn || row['ISBN'] || null,
    description: row.description || row['–û–ø–∏—Å–∞–Ω–∏–µ'] || null,
    cover_url: row.cover_url || row['–û–±–ª–æ–∂–∫–∞'] || row['URL –æ–±–ª–æ–∂–∫–∏'] || null,
    category: processCategories(row.category || row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || ''),
    age_range: row.age_range || row['–í–æ–∑—Ä–∞—Å—Ç'] || row['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'] || null,
    short_description: row.short_description || row['–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'] || null,
    qty_total: parseInt(row.qty_total || row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || row['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || '1'),
    qty_available: parseInt(row.qty_available || row['–î–æ—Å—Ç—É–ø–Ω–æ'] || row['–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || '1'),
    price_uah: parseFloat(row.price_uah || row['–¶–µ–Ω–∞'] || row['–¶–µ–Ω–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö'] || '0'),
    location: row.location || row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'] || null,
    code: row.code || row['–ö–æ–¥'] || row['–ö–æ–¥ –∫–Ω–∏–≥–∏'] || '',
    available: (row.available || row['–î–æ—Å—Ç—É–ø–Ω–∞'] || 'true').toLowerCase() === 'true'
  }
}

async function loadBooksFromCSV(csvFilePath) {
  try {
    console.log(`üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∏–∑ CSV —Ñ–∞–π–ª–∞: ${csvFilePath}`)
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...')
    const csvContent = readFileSync(csvFilePath, 'utf-8')
    
    // –ü–∞—Ä—Å–∏–º CSV
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–∞–Ω–Ω—ã—Ö...')
    const records = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV`)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
    const books = records.map(processBookData)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
    books.slice(0, 3).forEach((book, index) => {
      console.log(`\n–ö–Ω–∏–≥–∞ ${index + 1}:`)
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`)
      console.log(`  –ê–≤—Ç–æ—Ä: ${book.author}`)
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${book.category.join(', ')}`)
      console.log(`  –¶–µ–Ω–∞: ${book.price_uah} ‚Ç¥`)
      console.log(`  –ö–æ–¥: ${book.code}`)
    })
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log(`\n‚ö†Ô∏è  –ì–æ—Ç–æ–≤–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å ${books.length} –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?`)
    console.log('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:')
    console.log('- –î–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏')
    console.log('- –û–±–Ω–æ–≤–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ (–ø–æ –∫–æ–¥—É)')
    console.log('- –ù–µ —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏')
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã prompt, –Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    console.log('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...')
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ —á–∞—Å—Ç—è–º
    const batchSize = 10
    let successCount = 0
    let errorCount = 0
    
    for (let i = 0; i < books.length; i += batchSize) {
      const batch = books.slice(i, i + batchSize)
      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–∏–∏ ${Math.floor(i / batchSize) + 1}/${Math.ceil(books.length / batchSize)} (${batch.length} –∫–Ω–∏–≥)`)
      
      for (const book of batch) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
          const { data: existingBook } = await supabase
            .from('books')
            .select('id')
            .eq('code', book.code)
            .single()
          
          if (existingBook) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
            const { error: updateError } = await supabase
              .from('books')
              .update(book)
              .eq('code', book.code)
            
            if (updateError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ ${book.title}:`, updateError.message)
              errorCount++
            } else {
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${book.title}`)
              successCount++
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
            const { error: insertError } = await supabase
              .from('books')
              .insert(book)
            
            if (insertError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏ ${book.title}:`, insertError.message)
              errorCount++
            } else {
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞: ${book.title}`)
              successCount++
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏ ${book.title}:`, error.message)
          errorCount++
        }
      }
    }
    
    console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∫–Ω–∏–≥`)
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –∫–Ω–∏–≥`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: finalBooks } = await supabase
      .from('books')
      .select('*')
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${finalBooks.length}`)
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const csvFilePath = process.argv[2]

if (!csvFilePath) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
  console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/load-books-from-csv.mjs path/to/books.csv')
  console.error('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:')
  console.error('1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Google Sheets –≤ CSV')
  console.error('2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ books.csv')
  console.error('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/load-books-from-csv.mjs books.csv')
  process.exit(1)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
loadBooksFromCSV(csvFilePath)
