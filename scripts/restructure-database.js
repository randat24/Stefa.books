const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function restructureDatabase() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥—É–±–ª–∏
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π...');
    await checkDuplicates();
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    await createBackup();
    
    // 3. –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã books
    console.log('\n3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã books...');
    await removeForeignKeys();
    
    // 4. –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    await dropTables();
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã books
    console.log('\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã books...');
    await updateBooksTable();
    
    console.log('\n‚úÖ –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
}

async function checkDuplicates() {
  const { data: books, error } = await supabase
    .from('books')
    .select('*');
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
    return;
  }
  
  const duplicates = {};
  books.forEach(book => {
    const key = `${book.title.toLowerCase().trim()}_${book.author.toLowerCase().trim()}`;
    if (!duplicates[key]) {
      duplicates[key] = [];
    }
    duplicates[key].push(book);
  });
  
  const actualDuplicates = Object.values(duplicates).filter(group => group.length > 1);
  
  if (actualDuplicates.length > 0) {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${actualDuplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π`);
    
    for (const group of actualDuplicates) {
      const toKeep = group[0];
      const toDelete = group.slice(1);
      
      console.log(`üìñ –û—Å—Ç–∞–≤–ª—è–µ–º: "${toKeep.title}" (ID: ${toKeep.id})`);
      
      for (const book of toDelete) {
        console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º: "${book.title}" (ID: ${book.id})`);
        
        const { error } = await supabase
          .from('books')
          .delete()
          .eq('id', book.id);
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
        }
      }
    }
  } else {
    console.log('‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
}

async function createBackup() {
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã books
  const { data: books, error } = await supabase
    .from('books')
    .select('*');
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  const fs = require('fs');
  const backupData = {
    timestamp: new Date().toISOString(),
    books: books
  };
  
  fs.writeFileSync('backup-books.json', JSON.stringify(backupData, null, 2));
  console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ backup-books.json (${books.length} –∫–Ω–∏–≥)`);
}

async function removeForeignKeys() {
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è category_id, author_id, subcategory_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã books
  const { error } = await supabase.rpc('exec_sql', {
    sql: `
      ALTER TABLE books 
      DROP COLUMN IF EXISTS category_id,
      DROP COLUMN IF EXISTS author_id,
      DROP COLUMN IF EXISTS subcategory_id;
    `
  });
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π:', error);
  } else {
    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã');
  }
}

async function dropTables() {
  const tablesToDrop = ['books_with_authors', 'book_authors', 'authors', 'categories'];
  
  for (const table of tablesToDrop) {
    console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É ${table}...`);
    
    const { error } = await supabase.rpc('exec_sql', {
      sql: `DROP TABLE IF EXISTS ${table} CASCADE;`
    });
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error);
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —É–¥–∞–ª–µ–Ω–∞`);
    }
  }
}

async function updateBooksTable() {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
  const { error } = await supabase.rpc('exec_sql', {
    sql: `
      ALTER TABLE books 
      ADD COLUMN IF NOT EXISTS category VARCHAR(255),
      ADD COLUMN IF NOT EXISTS subcategory VARCHAR(255);
      
      -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
      UPDATE books 
      SET category = '–î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 
          subcategory = '–°–∫–∞–∑–∫–∏'
      WHERE category IS NULL;
    `
  });
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã books:', error);
  } else {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ books –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
restructureDatabase();