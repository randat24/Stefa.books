const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = '.env.local';
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const lines = envContent.split('\n');
  lines.forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      process.env[key.trim()] = value.trim();
    }
  });
}

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkAndFixUsersTable() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type')
      .eq('table_schema', 'public')
      .eq('table_name', 'users')
      .order('ordinal_position');

    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–æ–∫:', columnsError);
      return;
    }

    console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users:');
    columns.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const hasEmailColumn = columns.some(col => col.column_name === 'email');
    const hasRoleColumn = columns.some(col => col.column_name === 'role');
    const hasSubscriptionTypeColumn = columns.some(col => col.column_name === 'subscription_type');
    const hasStatusColumn = columns.some(col => col.column_name === 'status');
    const hasNameColumn = columns.some(col => col.column_name === 'name');
    const hasPhoneColumn = columns.some(col => col.column_name === 'phone');

    console.log('\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–æ–∫:');
    console.log(`  - email: ${hasEmailColumn ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - role: ${hasRoleColumn ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - subscription_type: ${hasSubscriptionTypeColumn ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - status: ${hasStatusColumn ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - name: ${hasNameColumn ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - phone: ${hasPhoneColumn ? '‚úÖ' : '‚ùå'}`);

    if (!hasEmailColumn || !hasRoleColumn || !hasSubscriptionTypeColumn || !hasStatusColumn || !hasNameColumn || !hasPhoneColumn) {
      console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users.');
      console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –≤ Supabase Dashboard > SQL Editor:');
      console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª scripts/simple-users-fix.sql');
      console.log('   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
      console.log('   - –í—Å—Ç–∞–≤—å—Ç–µ –≤ SQL Editor –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ');
      console.log('\n2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ fallback-login API:');
      console.log('   - –ò–∑–º–µ–Ω–∏—Ç–µ AuthContext.tsx —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /api/auth/fallback-login');
      console.log('   - –≠—Ç–æ—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å user_profiles —Ç–∞–±–ª–∏—Ü–µ–π');
    } else {
      console.log('\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users');
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      console.log('\nüìä –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('*')
        .limit(5);

      if (usersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', usersError);
      } else {
        if (users.length === 0) {
          console.log('  - –¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞');
        } else {
          users.forEach(user => {
            console.log(`  - ${user.name || 'N/A'} (${user.email || 'N/A'}) - ${user.role || 'N/A'}`);
          });
        }
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkAndFixUsersTable();
