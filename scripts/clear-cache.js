#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–µ–ø–ª–æ–µ–º –Ω–∞ Netlify
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞...');

// 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π build ID
const generateBuildId = () => {
  const now = new Date();
  return `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}-${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}`;
};

const newBuildId = generateBuildId();

// 2. –û–±–Ω–æ–≤–ª—è–µ–º next.config.js —Å –Ω–æ–≤—ã–º build ID
const nextConfigPath = path.join(process.cwd(), 'next.config.js');
if (fs.existsSync(nextConfigPath)) {
  let config = fs.readFileSync(nextConfigPath, 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π build ID –Ω–∞ –Ω–æ–≤—ã–π
  config = config.replace(
    /const BUILD_ID = .*?;/,
    `const BUILD_ID = '${newBuildId}';`
  );
  
  fs.writeFileSync(nextConfigPath, config);
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω BUILD_ID: ${newBuildId}`);
}

// 3. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–µ–ø–ª–æ—è
const deployMetaPath = path.join(process.cwd(), 'public', 'deploy-meta.json');
const deployMeta = {
  buildId: newBuildId,
  timestamp: new Date().toISOString(),
  version: process.env.COMMIT_REF || process.env.VERCEL_GIT_COMMIT_SHA || 'local',
  environment: process.env.NODE_ENV || 'development'
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é public –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const publicDir = path.join(process.cwd(), 'public');
if (!fs.existsSync(publicDir)) {
  fs.mkdirSync(publicDir, { recursive: true });
}

fs.writeFileSync(deployMetaPath, JSON.stringify(deployMeta, null, 2));
console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–µ–ø–ª–æ—è: ${deployMetaPath}`);

// 4. –û–±–Ω–æ–≤–ª—è–µ–º Service Worker —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∫–µ—à–∞
const swPath = path.join(process.cwd(), 'public', 'sw.js');
if (fs.existsSync(swPath)) {
  let swContent = fs.readFileSync(swPath, 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º CACHE_NAME –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  swContent = swContent.replace(
    /const CACHE_NAME = .*?;/,
    `const CACHE_NAME = 'stefa-books-cache-${newBuildId}';`
  );
  
  // –û–±–Ω–æ–≤–ª—è–µ–º BUILD_ID –≤ Service Worker
  swContent = swContent.replace(
    /const BUILD_ID = .*?;/,
    `const BUILD_ID = '${newBuildId}';`
  );
  
  fs.writeFileSync(swPath, swContent);
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Service Worker —Å –Ω–æ–≤—ã–º –∫–µ—à–µ–º: ${newBuildId}`);
}

// 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
const versionPath = path.join(process.cwd(), 'public', 'version.txt');
fs.writeFileSync(versionPath, newBuildId);
console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏: ${versionPath}`);

console.log('üéâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log(`üì¶ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${newBuildId}`);
console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é!');
