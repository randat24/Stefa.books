#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/check-admin-status.mjs
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkAdminStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...\n')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ auth.users:')
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers()
    
    if (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π auth:', authError.message)
    } else {
      authUsers.users.forEach(user => {
        const isAdmin = user.email === 'admin@stefabooks.com.ua' || 
                       user.email === 'admin@stefa-books.com.ua' ||
                       user.email === 'newadmin@stefabooks.com.ua'
        
        console.log(`  ${isAdmin ? 'üëë' : 'üë§'} ${user.email} (${user.id})`)
        console.log(`     Created: ${user.created_at}`)
        console.log(`     Confirmed: ${user.email_confirmed_at ? '‚úÖ' : '‚ùå'}`)
        console.log(`     Last Sign In: ${user.last_sign_in_at || 'Never'}`)
        console.log('')
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('üë• –ü—Ä–æ—Ñ–∏–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:')
    const { data: userProfiles, error: profileError } = await supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: false })
    
    if (profileError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', profileError.message)
    } else {
      userProfiles.forEach(profile => {
        const isAdmin = profile.role === 'admin' || 
                       profile.email === 'admin@stefabooks.com.ua' ||
                       profile.email === 'admin@stefa-books.com.ua' ||
                       profile.email === 'newadmin@stefabooks.com.ua'
        
        console.log(`  ${isAdmin ? 'üëë' : 'üë§'} ${profile.email || 'No email'} (${profile.id})`)
        console.log(`     Name: ${profile.name || 'No name'}`)
        console.log(`     Role: ${profile.role || 'No role'}`)
        console.log(`     Status: ${profile.status || 'No status'}`)
        console.log(`     Created: ${profile.created_at}`)
        console.log('')
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
    console.log(`  NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`)
    console.log(`  SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'}`)
    console.log(`  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå'}`)
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkAdminStatus()
