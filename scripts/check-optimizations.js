#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ –≤—Å–µ–º —Ç—è–∂–µ–ª—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...\n');

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
let totalFiles = 0;
let optimizedFiles = 0;
let issuesFound = 0;
const issues = [];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const patterns = [
  'src/app/**/*.tsx',
  'src/components/**/*.tsx',
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
const heavyComponents = [
  'BookCard',
  'BookGrid', 
  'BookList',
  'Catalog',
  'Categories',
  'FAQ',
  'SocialProof',
  'PlansLite',
  'SubscribeFormHome',
  'ContactLocation',
  'FinalCTA',
  'AnalyticsDashboard',
  'BooksTable',
  'UsersTable',
  'RentalsTable',
  'AddBookDialog',
  'EditBookDialog',
  'SubscribeModal',
  'BookPreviewModal',
  'RentalModal',
  'RentalForm',
  'ContactForm',
  'SearchResults',
  'SearchFilters',
  'HeaderSearch',
  'BookRecommendations',
  'RecentViews',
  'RelatedBooksSection',
  'BookDetails',
];

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
 */
function checkFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let fileOptimized = true;
  const fileIssues = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  heavyComponents.forEach(component => {
    const componentRegex = new RegExp(`<${component}([^>]*)>`, 'g');
    const matches = content.match(componentRegex);
    
    if (matches) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      const hasLazyLoad = content.includes('LazyLoad') || content.includes('lazy');
      const hasSuspense = content.includes('Suspense');
      const hasLazyImport = content.includes('LazyComponents') || content.includes('lazy(');
      
      if (!hasLazyLoad && !hasLazyImport) {
        fileOptimized = false;
        fileIssues.push(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component} –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      }
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const imageRegex = /<img([^>]*)>/g;
  const imageMatches = content.match(imageRegex);
  
  if (imageMatches) {
    imageMatches.forEach(match => {
      if (!match.includes('loading=') && !match.includes('LazyImage')) {
        fileOptimized = false;
        fileIssues.push('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ loading="lazy"');
      }
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Next.js Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const nextImageRegex = /<Image([^>]*)>/g;
  const nextImageMatches = content.match(nextImageRegex);
  
  if (nextImageMatches) {
    nextImageMatches.forEach(match => {
      if (!match.includes('loading=') && !match.includes('LazyImage')) {
        fileOptimized = false;
        fileIssues.push('Next.js Image –±–µ–∑ loading="lazy"');
      }
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ data-lazy –∞—Ç—Ä–∏–±—É—Ç–æ–≤
  const hasDataLazy = content.includes('data-lazy');
  const hasLazySection = content.includes('LazySection');
  
  if (!hasDataLazy && !hasLazySection && content.includes('section')) {
        fileIssues.push('–°–µ–∫—Ü–∏—è –±–µ–∑ data-lazy –∞—Ç—Ä–∏–±—É—Ç–∞');
  }
  
  if (fileIssues.length > 0) {
    issues.push({
      file: filePath,
      issues: fileIssues
    });
    issuesFound += fileIssues.length;
  }
  
  return fileOptimized;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function main() {
  patterns.forEach(pattern => {
    const files = glob.sync(pattern, { cwd: process.cwd() });
    
    files.forEach(file => {
      totalFiles++;
      
      if (checkFile(file)) {
        optimizedFiles++;
      }
    });
  });
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalFiles}`);
  console.log(`   –§–∞–π–ª–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${optimizedFiles}`);
  console.log(`   –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${issues.length}`);
  console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: ${issuesFound}`);
  
  if (issues.length > 0) {
    console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    issues.forEach(({ file, issues: fileIssues }) => {
      console.log(`\nüìÅ ${file}:`);
      fileIssues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue}`);
      });
    });
  }
  
  // –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const optimizationScore = Math.round((optimizedFiles / totalFiles) * 100);
  
  console.log(`\nüéØ –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${optimizationScore}%`);
  
  if (optimizationScore >= 90) {
    console.log('üéâ –û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è! –ü–æ—á—Ç–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
  } else if (optimizationScore >= 70) {
    console.log('‚úÖ –•–æ—Ä–æ—à–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
  } else if (optimizationScore >= 50) {
    console.log('‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.');
  } else {
    console.log('‚ùå –ù–∏–∑–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.');
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (issuesFound > 0) {
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: node scripts/optimize-lazy-loading.js');
    console.log('   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AutoLazyWrapper –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    console.log('   3. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ LazyImageOptimized –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    console.log('   4. –î–æ–±–∞–≤–ª—è–π—Ç–µ data-lazy –∞—Ç—Ä–∏–±—É—Ç—ã –∫ —Å–µ–∫—Ü–∏—è–º');
  }
  
  console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();
