const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkStructure() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ books
    const { data: bookSample, error: bookError } = await supabase
      .from('books')
      .select('id, title, category_id')
      .limit(3);

    if (bookError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', bookError);
    } else {
      console.log('üìö –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥:');
      bookSample.forEach(book => {
        console.log(`   ID: ${book.id} (type: ${typeof book.id})`);
        console.log(`   Title: ${book.title}`);
        console.log(`   Category ID: ${book.category_id} (type: ${typeof book.category_id})`);
        console.log('   ---');
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categorySample, error: categoryError } = await supabase
      .from('categories')
      .select('id, name')
      .limit(5);

    if (categoryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoryError);
    } else {
      console.log('\nüìÇ –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
      categorySample.forEach(cat => {
        console.log(`   ID: ${cat.id} (type: ${typeof cat.id})`);
        console.log(`   Name: ${cat.name}`);
        console.log('   ---');
      });
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');

    if (bookSample?.[0] && categorySample?.[0]) {
      const testBookId = bookSample[0].id;
      const testCategoryId = categorySample[0].id;

      console.log(`–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–Ω–∏–≥–µ ${testBookId} –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${testCategoryId}`);

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ category_id
      const { data: updateResult, error: updateError } = await supabase
        .from('books')
        .update({ category_id: testCategoryId })
        .eq('id', testBookId)
        .select();

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
      } else {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updateResult);

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        await supabase
          .from('books')
          .update({ category_id: null })
          .eq('id', testBookId);
        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—á–µ–Ω–æ');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkStructure();