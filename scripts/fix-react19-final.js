const fs = require('fs');
const path = require('path');

console.log('üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ React 19 –ø—Ä–æ–±–ª–µ–º...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, pattern) {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules' && item !== 'test-pages-backup') {
      files.push(...findFiles(fullPath, pattern));
    } else if (stat.isFile() && pattern.test(item)) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è memo
  content = content.replace(/const\s+(\w+)\s*=\s*memo\(/g, 'const $1 = (');
  content = content.replace(/export\s+const\s+(\w+)\s*=\s*memo\(/g, 'export const $1 = (');
  
  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º forwardRef - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  content = content.replace(/React\.forwardRef<[^>]*>\(/g, '(');
  content = content.replace(/forwardRef<[^>]*>\(/g, '(');
  
  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã React
  content = content.replace(/React\.ElementRef/g, 'React.ElementRef');
  content = content.replace(/React\.ComponentPropsWithoutRef/g, 'React.ComponentPropsWithoutRef');
  content = content.replace(/React\.HTMLAttributes/g, 'React.HTMLAttributes');
  content = content.replace(/React\.ThHTMLAttributes/g, 'React.ThHTMLAttributes');
  content = content.replace(/React\.TdHTMLAttributes/g, 'React.TdHTMLAttributes');
  content = content.replace(/React\.TextareaHTMLAttributes/g, 'React.TextareaHTMLAttributes');
  
  // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ lucide-react
  const iconReplacements = {
    'QrCode': 'QrCodeIcon',
    'AlertTriangle': 'AlertTriangleIcon', 
    'MoreHorizontal': 'MoreHorizontalIcon',
    'History': 'HistoryIcon',
    'Circle': 'CircleIcon'
  };

  for (const [oldIcon, newIcon] of Object.entries(iconReplacements)) {
    content = content.replace(new RegExp(`\\b${oldIcon}\\b`, 'g'), newIcon);
  }
  
  // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º createContext –∏ useContext
  content = content.replace(/import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g, (match, imports) => {
    if (content.includes('createContext') && !imports.includes('createContext')) {
      return `import { ${imports}, createContext } from 'react'`;
    }
    if (content.includes('useContext') && !imports.includes('useContext')) {
      return `import { ${imports}, useContext } from 'react'`;
    }
    return match;
  });
  
  // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ReactNode
  content = content.replace(/import\s*{\s*([^}]*)\s*}\s*from\s*['"]react['"]/g, (match, imports) => {
    if (content.includes('ReactNode') && !imports.includes('ReactNode')) {
      return `import { ${imports}, ReactNode } from 'react'`;
    }
    return match;
  });
  
  // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  content = content.replace(/\(e\)\s*=>/g, '(e: React.ChangeEvent<HTMLInputElement>) =>');
  content = content.replace(/\(prev\)\s*=>/g, '(prev: any) =>');
  content = content.replace(/\(user\)\s*=>/g, '(user: any) =>');
  content = content.replace(/\(book\)\s*=>/g, '(book: any) =>');
  
  // 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º useRef —Å null
  content = content.replace(/useRef<([^>]+)>\(null\)/g, 'useRef<$1 | null>(null)');
  
  // 9. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º onClick —Ç–∏–ø—ã
  content = content.replace(/onClick=\{\(e: React\.ChangeEvent<HTMLInputElement>\)\s*=>/g, 'onClick={(e: React.MouseEvent<HTMLInputElement>) =>');
  
  // 10. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–ø–æ—Ä—Ç—ã
  content = content.replace(/import\s*{\s*([^}]*)\s*,\s*ReactNode\s*,\s*ReactNode\s*([^}]*)\s*}/g, 'import { $1, ReactNode $2 }');
  
  // 11. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSX —ç–ª–µ–º–µ–Ω—Ç—ã
  content = content.replace(/<tfoot/g, '<tfoot');
  content = content.replace(/<caption/g, '<caption');
  
  // 12. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è lucide-react –∏–∫–æ–Ω–æ–∫
  content = content.replace(/FC<IconProps>/g, 'React.FC<React.SVGProps<SVGSVGElement>>');
  content = content.replace(/FC<ImageProps>/g, 'React.FC<React.ImgHTMLAttributes<HTMLImageElement>>');
  content = content.replace(/FC<SelectProps>/g, 'React.FC<any>');

  if (content !== fs.readFileSync(filePath, 'utf8')) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
    modified = true;
  }
  
  return modified;
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
const tsFiles = findFiles('src', /\.(ts|tsx)$/);
let fixedCount = 0;

console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${tsFiles.length} TypeScript —Ñ–∞–π–ª–æ–≤`);

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
for (const file of tsFiles) {
  try {
    if (fixFile(file)) {
      fixedCount++;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${file}:`, error.message);
  }
}

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤`);
