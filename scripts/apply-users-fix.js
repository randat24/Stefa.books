#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã users
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n');
    lines.forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}

loadEnv();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function applyUsersFix() {
  console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã users...\n');

  try {
    // 1. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É role
    console.log('1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ role...');
    const { error: roleError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE users 
        ADD COLUMN IF NOT EXISTS role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin', 'moderator'));
      `
    });

    if (roleError) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ role —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', roleError.message);
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ role –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // 2. –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–µ–π
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ä–æ–ª–µ–π...');
    const { error: indexError } = await supabase.rpc('exec_sql', {
      sql: 'CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);'
    });

    if (indexError) {
      console.log('‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', indexError.message);
    } else {
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω');
    }

    // 3. –û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
    console.log('\n3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const { error: adminError } = await supabase
      .from('users')
      .update({ role: 'admin' })
      .in('email', ['admin@stefa-books.com.ua', 'admin@stefabooks.com.ua']);

    if (adminError) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', adminError.message);
    } else {
      console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å user –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    console.log('\n4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ user –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö...');
    const { error: userError } = await supabase
      .from('users')
      .update({ role: 'user' })
      .is('role', null);

    if (userError) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ user:', userError.message);
    } else {
      console.log('‚úÖ –†–æ–ª—å user —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const { data: users, error: checkError } = await supabase
      .from('users')
      .select('id, name, email, role, subscription_type, status')
      .order('created_at', { ascending: false })
      .limit(5);

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError);
    } else {
      console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      users.forEach((user, index) => {
        console.log(`  ${index + 1}. ${user.name} (${user.email}) - —Ä–æ–ª—å: ${user.role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
applyUsersFix().then(() => {
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
