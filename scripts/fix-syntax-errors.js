#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...\n');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const patterns = [
  'src/**/*.tsx',
  'src/**/*.ts',
];

let fixedFiles = 0;

patterns.forEach(pattern => {
  const files = glob.sync(pattern, { cwd: process.cwd() });
  
  files.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let modified = false;
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å / loading="lazy"
    const loadingRegex = /\/\s+loading="lazy"\s*\/>/g;
    if (content.match(loadingRegex)) {
      content = content.replace(loadingRegex, ' loading="lazy" />');
      modified = true;
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å / loading="lazy" />
    const loadingRegex2 = /\/\s+loading="lazy"\s*\/\s*>/g;
    if (content.match(loadingRegex2)) {
      content = content.replace(loadingRegex2, ' loading="lazy" />');
      modified = true;
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
    const extraBraceRegex = /\}\s*\}\s*$/gm;
    if (content.match(extraBraceRegex)) {
      content = content.replace(extraBraceRegex, '}');
      modified = true;
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    const unclosedTagRegex = /<(\w+)([^>]*)>\s*$/gm;
    if (content.match(unclosedTagRegex)) {
      content = content.replace(unclosedTagRegex, '<$1$2>');
      modified = true;
    }
    
    if (modified) {
      fs.writeFileSync(file, content);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
      fixedFiles++;
    }
  });
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
console.log(`   –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedFiles}`);
console.log(`\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
