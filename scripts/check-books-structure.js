const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkBooksStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã books...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∫–Ω–∏–≥—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data: books, error } = await supabase
      .from('books')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
    } else {
      console.log('üìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã books:');
      if (books && books.length > 0) {
        const book = books[0];
        Object.keys(book).forEach(key => {
          console.log(`   - ${key}: ${typeof book[key]} (${book[key] === null ? 'null' : 'not null'})`);
        });
      } else {
        console.log('   –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è category –∏ subcategory
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è...');
    const { data: testBook, error: testError } = await supabase
      .from('books')
      .select('id, title, author, category, subcategory')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:', testError);
    } else {
      console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è —Ä–∞–±–æ—Ç–∞—é—Ç:', testBook);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkBooksStructure();
