#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –≤ Cloudinary
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫–∏
 */

const cloudinary = require('cloudinary').v2;
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabase = createClient(
  process.env.SUPABASE_URL || 'your_supabase_url',
  process.env.SUPABASE_ANON_KEY || 'your_supabase_anon_key'
);

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'dchx7vd97',
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏–∑ Google Drive URL
 */
function extractFileId(url) {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([^\/]+)/,
    /drive\.google\.com\/open\?id=([^\/]+)/,
    /drive\.google\.com\/uc\?export=view&id=([^&]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return null;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
 */
async function uploadToCloudinary(imageUrl, publicId) {
  try {
    const result = await cloudinary.uploader.upload(imageUrl, {
      public_id: `stefa-books/${publicId}`,
      folder: 'stefa-books',
      resource_type: 'image',
      transformation: [
        { width: 300, height: 400, crop: 'fill', quality: 'auto' }
      ]
    });
    
    return result.secure_url;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${publicId}:`, error.message);
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function updateCoverUrl(bookId, newUrl) {
  try {
    const { error } = await supabase
      .from('books')
      .update({ cover_url: newUrl })
      .eq('id', bookId);
    
    if (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: books, error } = await supabase
      .from('books')
      .select('id, code, title, cover_url')
      .not('cover_url', 'is', null);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    let successCount = 0;
    let errorCount = 0;
    let skipCount = 0;
    
    for (const book of books) {
      try {
        console.log(`üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${book.title} (${book.code})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –æ–±–ª–æ–∂–∫–∞ –≤ Cloudinary
        if (book.cover_url && book.cover_url.includes('cloudinary.com')) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –≤ Cloudinary): ${book.cover_url}`);
          skipCount++;
          continue;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ Google Drive URL
        const fileId = extractFileId(book.cover_url);
        if (!fileId) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file_id –∏–∑ URL: ${book.cover_url}`);
          errorCount++;
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const directUrl = `https://drive.google.com/uc?export=view&id=${fileId}`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
        const cloudinaryUrl = await uploadToCloudinary(directUrl, book.code);
        
        if (cloudinaryUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const updated = await updateCoverUrl(book.id, cloudinaryUrl);
          
          if (updated) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${cloudinaryUrl}`);
            successCount++;
          } else {
            errorCount++;
          }
        } else {
          errorCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏ ${book.code}:`, error.message);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${books.length}`);
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main, extractFileId, uploadToCloudinary, updateCoverUrl };
