const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function safeRestructure() {
  try {
    console.log('üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, category, category_id, author_id, subcategory_id')
      .limit(10);

    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', booksError);
      return;
    }

    console.log('‚úÖ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
    books.forEach((book, i) => {
      if (i < 3) {
        console.log(`   "${book.title}" | –ê–≤—Ç–æ—Ä: "${book.author}" | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${book.category}"`);
        console.log(`     IDs: category_id=${book.category_id}, author_id=${book.author_id}, subcategory_id=${book.subcategory_id}`);
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π author –∏ category
    const { data: emptyAuthors, error: authorError } = await supabase
      .from('books')
      .select('id, title')
      .or('author.is.null,author.eq.')
      .limit(5);

    const { data: emptyCategories, error: categoryError } = await supabase
      .from('books')
      .select('id, title')
      .or('category.is.null,category.eq.')
      .limit(5);

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–π:`);
    console.log(`   –ö–Ω–∏–≥ –±–µ–∑ –∞–≤—Ç–æ—Ä–∞: ${emptyAuthors?.length || 0}`);
    console.log(`   –ö–Ω–∏–≥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${emptyCategories?.length || 0}`);

    if (emptyAuthors?.length > 0) {
      console.log(`   –ü—Ä–∏–º–µ—Ä—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∞: ${emptyAuthors.map(b => b.title).join(', ')}`);
    }
    if (emptyCategories?.length > 0) {
      console.log(`   –ü—Ä–∏–º–µ—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${emptyCategories.map(b => b.title).join(', ')}`);
    }

    // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    console.log('   1. –ú–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü');
    console.log('   2. –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');

    // 4. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    console.log('\nüìã –ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('   ‚úÖ –ü–æ–ª—è author –∏ category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–∞–∫ TEXT');
    console.log('   üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è author –∏ category –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)');
    console.log('   üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—è: category_id, author_id, subcategory_id, age_category_id');
    console.log('   üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã: categories, books_with_authors, book_authors, authors');

    if (process.argv.includes('--execute')) {
      console.log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é...');

      // –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      if (emptyCategories?.length > 0) {
        console.log('\nüìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        try {
          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ category_id
          for (const book of emptyCategories.slice(0, 5)) {
            const { data: bookData } = await supabase
              .from('books')
              .select('category_id')
              .eq('id', book.id)
              .single();

            if (bookData?.category_id) {
              const { data: categoryData } = await supabase
                .from('categories')
                .select('name')
                .eq('id', bookData.category_id)
                .single();

              if (categoryData?.name) {
                const { error: updateError } = await supabase
                  .from('books')
                  .update({ category: categoryData.name })
                  .eq('id', book.id);

                if (!updateError) {
                  console.log(`   ‚úÖ "${book.title}" ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${categoryData.name}"`);
                }
              }
            }
          }
        } catch (err) {
          console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${err.message}`);
        }
      }

      // –®–∞–≥ 2: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –ø–æ–ª—è—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–µ–π category_id, author_id, subcategory_id');
      console.log('   –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Supabase Dashboard:');
      console.log('   ');
      console.log('   ALTER TABLE books DROP COLUMN IF EXISTS category_id;');
      console.log('   ALTER TABLE books DROP COLUMN IF EXISTS author_id;');
      console.log('   ALTER TABLE books DROP COLUMN IF EXISTS subcategory_id;');
      console.log('   ALTER TABLE books DROP COLUMN IF EXISTS age_category_id;');
      console.log('   ');
      console.log('   DROP TABLE IF EXISTS categories CASCADE;');
      console.log('   DROP TABLE IF EXISTS books_with_authors CASCADE;');
      console.log('   DROP TABLE IF EXISTS book_authors CASCADE;');
      console.log('   DROP TABLE IF EXISTS authors CASCADE;');

      console.log('\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —á–∞—Å—Ç—å —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('üìã –ü–æ–ª—è author –∏ category –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ');
    } else {
      console.log('\n‚ñ∂Ô∏è  –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --execute');
      console.log('   node safe-restructure.js --execute');
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

safeRestructure();