#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Lighthouse –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Lighthouse
function runLighthouse(url) {
  try {
    console.log(`üìä –ó–∞–ø—É—Å–∫ Lighthouse –¥–ª—è ${url}...`);
    
    const command = `npx lighthouse ${url} --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless" --only-categories=performance,accessibility,best-practices`;
    
    execSync(command, { stdio: 'pipe' });
    
    // –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç
    const report = JSON.parse(fs.readFileSync('./lighthouse-report.json', 'utf8'));
    
    return {
      performance: report.categories.performance.score * 100,
      accessibility: report.categories.accessibility.score * 100,
      bestPractices: report.categories['best-practices'].score * 100,
      metrics: report.audits
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lighthouse:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞
function checkBundleSize() {
  try {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞...');
    
    const command = 'npx next build';
    execSync(command, { stdio: 'pipe' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä .next/static
    const staticDir = path.join(process.cwd(), '.next/static');
    if (fs.existsSync(staticDir)) {
      const files = fs.readdirSync(staticDir, { recursive: true });
      let totalSize = 0;
      
      files.forEach(file => {
        const filePath = path.join(staticDir, file);
        if (fs.statSync(filePath).isFile()) {
          totalSize += fs.statSync(filePath).size;
        }
      });
      
      return {
        totalSize: totalSize,
        totalSizeMB: (totalSize / 1024 / 1024).toFixed(2)
      };
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeScript –æ—à–∏–±–æ–∫
function checkTypeScript() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript...');
    
    const command = 'npx tsc --noEmit';
    execSync(command, { stdio: 'pipe' });
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå TypeScript –æ—à–∏–±–∫–∏:', error.message);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ESLint
function checkESLint() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint...');
    
    const command = 'npx eslint src --ext .ts,.tsx --max-warnings 0';
    execSync(command, { stdio: 'pipe' });
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå ESLint –æ—à–∏–±–∫–∏:', error.message);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const results = {
    timestamp: new Date().toISOString(),
    typescript: null,
    eslint: null,
    bundleSize: null,
    lighthouse: null
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript
  results.typescript = checkTypeScript();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ESLint
  results.eslint = checkESLint();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞
  results.bundleSize = checkBundleSize();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º Lighthouse (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
  const localUrl = 'http://localhost:3000';
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    execSync(`curl -s -o /dev/null -w "%{http_code}" ${localUrl}`, { stdio: 'pipe' });
    results.lighthouse = runLighthouse(localUrl);
  } catch (error) {
    console.log('‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Lighthouse –ø—Ä–æ–≤–µ—Ä–∫—É');
    console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ "pnpm dev" –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É');
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
  console.log('=====================================');
  
  // TypeScript
  if (results.typescript?.success) {
    console.log('‚úÖ TypeScript: –ë–µ–∑ –æ—à–∏–±–æ–∫');
  } else {
    console.log('‚ùå TypeScript: –ï—Å—Ç—å –æ—à–∏–±–∫–∏');
  }
  
  // ESLint
  if (results.eslint?.success) {
    console.log('‚úÖ ESLint: –ë–µ–∑ –æ—à–∏–±–æ–∫');
  } else {
    console.log('‚ùå ESLint: –ï—Å—Ç—å –æ—à–∏–±–∫–∏');
  }
  
  // –†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞
  if (results.bundleSize) {
    console.log(`üì¶ –†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞: ${results.bundleSize.totalSizeMB} MB`);
    if (results.bundleSize.totalSizeMB > 5) {
      console.log('‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }
  
  // Lighthouse
  if (results.lighthouse) {
    console.log(`üìä Lighthouse Performance: ${results.lighthouse.performance.toFixed(1)}/100`);
    console.log(`üìä Lighthouse Accessibility: ${results.lighthouse.accessibility.toFixed(1)}/100`);
    console.log(`üìä Lighthouse Best Practices: ${results.lighthouse.bestPractices.toFixed(1)}/100`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const performance = results.lighthouse.performance;
    if (performance < 90) {
      console.log('‚ö†Ô∏è  Performance score –Ω–∏–∂–µ 90, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
    
    const accessibility = results.lighthouse.accessibility;
    if (accessibility < 90) {
      console.log('‚ö†Ô∏è  Accessibility score –Ω–∏–∂–µ 90, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = './performance-report.json';
  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportPath}`);

  // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (fs.existsSync('./lighthouse-report.json')) {
    fs.unlinkSync('./lighthouse-report.json');
  }

  console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main().catch(console.error);
