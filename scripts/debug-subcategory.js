const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugSubcategory() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ subcategory...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ subcategory
    const { data: test, error: testError } = await supabase.rpc('exec_sql', {
      sql_query: `
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'books' AND column_name = 'subcategory';
      `
    });
    
    console.log('–ü–æ–ª–µ subcategory:', test);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API...');
    const { data: updateResult, error: updateError } = await supabase
      .from('books')
      .update({ subcategory: '–°–∫–∞–∑–∫–∏' })
      .eq('id', '9ac958f3-54e2-42cf-ba72-889fe792e5f3')
      .select();
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API:', updateError);
    } else {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API:', updateResult);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: books, error: checkError } = await supabase
      .from('books')
      .select('id, title, subcategory')
      .limit(3);
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', checkError);
    } else {
      console.log('üìö –†–µ–∑—É–ª—å—Ç–∞—Ç:');
      books.forEach(book => {
        console.log(`   - "${book.title}" subcategory: ${book.subcategory}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

debugSubcategory();
