#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 105 –∫–Ω–∏–≥ –∏–∑ SQL —Ñ–∞–π–ª–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/load-105-books-from-sql.mjs
 */

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function loadBooksFromSQL() {
  try {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ 105 –∫–Ω–∏–≥ –∏–∑ SQL —Ñ–∞–π–ª–∞...')
    console.log('=' .repeat(60))
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞...')
    const sqlContent = readFileSync('load_all_105_books.sql', 'utf-8')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL...')
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlContent })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message)
      return
    }
    
    console.log('‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...')
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('*')
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–∏–≥:', booksError.message)
      return
    }
    
    console.log(`\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${books.length}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = {}
    books.forEach(book => {
      if (book.category_id) {
        categoryStats[book.category_id] = (categoryStats[book.category_id] || 0) + 1
      }
    })
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`)
    Object.entries(categoryStats).forEach(([categoryId, count]) => {
      console.log(`  ${categoryId}: ${count} –∫–Ω–∏–≥`)
    })
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const booksWithoutCategory = books.filter(book => !book.category_id)
    if (booksWithoutCategory.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ö–Ω–∏–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (${booksWithoutCategory.length}):`)
      booksWithoutCategory.slice(0, 5).forEach(book => {
        console.log(`  - ${book.title} (${book.code})`)
      })
      if (booksWithoutCategory.length > 5) {
        console.log(`  ... –∏ –µ—â–µ ${booksWithoutCategory.length - 5} –∫–Ω–∏–≥`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
loadBooksFromSQL()
