#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "Auth session missing"
 * –ü—Ä–æ–±–ª–µ–º–∞: Supabase –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ "Auth session missing"...');

// 1. –û–±–Ω–æ–≤–ª—è–µ–º createSupabaseServerClient –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–π
const serverClientPath = path.join(process.cwd(), 'src/lib/supabase/server.ts');

if (fs.existsSync(serverClientPath)) {
  let serverClient = fs.readFileSync(serverClientPath, 'utf8');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
  const improvedServerClient = `import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import type { Database } from './database.types';

export async function createSupabaseServerClient() {
  const cookieStore = await cookies();

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => {
              cookieStore.set(name, value, options);
            });
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏ –≤ server components
            console.warn('Warning: Could not set cookie in server component:', error);
          }
        },
      },
      auth: {
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce'
      }
    }
  );
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getSupabaseUser() {
  try {
    const supabase = await createSupabaseServerClient();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.warn('Session error:', sessionError.message);
      return { user: null, error: sessionError };
    }
    
    if (session?.user) {
      return { user: session.user, error: null };
    }
    
    // Fallback: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    return { user, error: userError };
    
  } catch (error) {
    console.error('Error getting Supabase user:', error);
    return { user: null, error };
  }
}`;

  fs.writeFileSync(serverClientPath, improvedServerClient);
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω createSupabaseServerClient');
}

// 2. –û–±–Ω–æ–≤–ª—è–µ–º API route /api/auth/me –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
const authMePath = path.join(process.cwd(), 'src/app/api/auth/me/route.ts');

if (fs.existsSync(authMePath)) {
  let authMe = fs.readFileSync(authMePath, 'utf8');
  
  // –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
  const improvedAuthMe = `import { NextRequest, NextResponse } from 'next/server';
import { createSupabaseServerClient, getSupabaseUser } from '@/lib/supabase/server';
import { logger } from '@/lib/logger';

// ============================================================================
// API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
// ============================================================================

export async function GET(request: NextRequest) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { user, error: userError } = await getSupabaseUser();

    if (userError) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      logger.warn('Auth session error (non-critical):', { 
        error: userError.message,
        code: userError.status || 'unknown'
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (userError.message?.includes('Auth session missing') || 
          userError.message?.includes('Invalid JWT')) {
        return NextResponse.json(
          { 
            success: false, 
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
            code: 'SESSION_MISSING'
          },
          { status: 401 }
        );
      }
    }

    if (!user) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
          code: 'NOT_AUTHENTICATED'
        },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const supabase = await createSupabaseServerClient();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: profiles, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id);

    let profile = profiles?.[0] || null;
    let hasProfileError = !!profileError;

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ users, –ø—Ä–æ–±—É–µ–º –≤ articles (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (!profile && !hasProfileError) {
      const { data: articles, error: articlesError } = await supabase
        .from('articles')
        .select('*')
        .eq('id', user.id)
        .limit(1);

      if (articlesError) {
        logger.warn('Error fetching user from articles table:', articlesError);
      } else if (articles && articles.length > 0) {
        profile = articles[0];
        logger.info('User found in articles table (legacy)');
      }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
    if (!profile && !hasProfileError) {
      logger.info('Creating basic user profile for:', user.id);
      
      const basicProfile = {
        id: user.id,
        email: user.email,
        full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar_url: user.user_metadata?.avatar_url || null,
        is_admin: false,
        subscription_status: 'inactive',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ users
      const { data: newProfile, error: insertError } = await supabase
        .from('users')
        .insert(basicProfile)
        .select()
        .single();

      if (insertError) {
        logger.warn('Could not create user profile:', insertError);
        profile = basicProfile; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      } else {
        profile = newProfile;
      }
    }

    logger.info('Auth success:', { 
      userId: user.id,
      email: user.email,
      hasProfile: !!profile
    });

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        user_metadata: user.user_metadata,
        created_at: user.created_at,
        updated_at: user.updated_at
      },
      profile: profile ? {
        id: profile.id,
        email: profile.email,
        full_name: profile.full_name,
        avatar_url: profile.avatar_url,
        is_admin: profile.is_admin || false,
        subscription_status: profile.subscription_status || 'inactive',
        created_at: profile.created_at,
        updated_at: profile.updated_at
      } : null
    });

  } catch (error) {
    logger.error('Auth API error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_ERROR'
      },
      { status: 500 }
    );
  }
}`;

  fs.writeFileSync(authMePath, improvedAuthMe);
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω API route /api/auth/me');
}

// 3. –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const middlewarePath = path.join(process.cwd(), 'src/middleware.ts');

if (fs.existsSync(middlewarePath)) {
  let middleware = fs.readFileSync(middlewarePath, 'utf8');
  
  const improvedMiddleware = `import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
  const pathname = request.nextUrl.pathname;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API —Ä–æ—É—Ç—ã
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/api/') ||
    pathname.startsWith('/images/') ||
    pathname.startsWith('/favicon.ico') ||
    pathname.startsWith('/sw.js') ||
    pathname.startsWith('/cache-') ||
    pathname.startsWith('/version.txt') ||
    pathname.startsWith('/deploy-meta.json')
  ) {
    return NextResponse.next();
  }

  // –î–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  if (pathname.startsWith('/dashboard') || pathname.startsWith('/admin')) {
    const response = NextResponse.next();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate, max-age=0');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
    response.headers.set('X-Auth-Required', 'true');
    
    return response;
  }

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  const response = NextResponse.next();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è HTML
  if (pathname === '/' || pathname.endsWith('.html') || !pathname.includes('.')) {
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate, max-age=0');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
  }
  
  return response;
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|sw.js|cache-|version.txt|deploy-meta.json).*)',
  ],
};`;

  fs.writeFileSync(middlewarePath, improvedMiddleware);
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω middleware');
}

// 4. –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π AuthContext
const authContextPath = path.join(process.cwd(), 'src/contexts/AuthContext.tsx');

if (fs.existsSync(authContextPath)) {
  let authContext = fs.readFileSync(authContextPath, 'utf8');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
  const improvedAuthContext = authContext.replace(
    /const checkAuthStatus = async \(\) => \{[\s\S]*?\};/,
    `const checkAuthStatus = async () => {
      try {
        setIsLoading(true);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage
        const savedSession = localStorage.getItem('supabase.auth.token');
        const headers = {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        };
        
        if (savedSession) {
          try {
            const session = JSON.parse(savedSession);
            if (session.access_token) {
              headers['Authorization'] = \`Bearer \${session.access_token}\`;
            }
          } catch (error) {
            // –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è, —É–¥–∞–ª—è–µ–º –µ—ë
            console.warn('Invalid session data, clearing...');
            localStorage.removeItem('supabase.auth.token');
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const url = new URL('/api/auth/me', window.location.origin);
        url.searchParams.set('_t', Date.now().toString());
        
        const response = await fetch(url.toString(), {
          method: 'GET',
          headers,
          cache: 'no-store'
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success && result.user) {
            setUser(result.user);
            setIsAuthenticated(true);
            setProfile(result.profile);
          } else {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            setUser(null);
            setProfile(null);
            setIsAuthenticated(false);
            localStorage.removeItem('supabase.auth.token');
          }
        } else {
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          setUser(null);
          setProfile(null);
          setIsAuthenticated(false);
          localStorage.removeItem('supabase.auth.token');
        }
      } catch (error) {
        console.error('AuthContext: Error checking auth status', error);
        setUser(null);
        setProfile(null);
        setIsAuthenticated(false);
        localStorage.removeItem('supabase.auth.token');
      } finally {
        setIsLoading(false);
      }
    };`
  );
  
  fs.writeFileSync(authContextPath, improvedAuthContext);
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω AuthContext');
}

// 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
const fixInstructions = `# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ "Auth session missing"

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:

1. ‚úÖ –£–ª—É—á—à–µ–Ω createSupabaseServerClient —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–π
2. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω API route /api/auth/me —Å fallback –ª–æ–≥–∏–∫–æ–π
3. ‚úÖ –£–ª—É—á—à–µ–Ω middleware –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
4. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω AuthContext —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:

- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è getSupabaseUser() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É)
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –£–ª—É—á—à–µ–Ω–∞ fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

## –ß—Ç–æ —ç—Ç–æ —Ä–µ—à–∞–µ—Ç:

- –û—à–∏–±–∫–∞ "Auth session missing" –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ–π
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Å—Å–∏–µ–π
- –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: npm run build
2. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: npm run deploy:clean
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

`;

fs.writeFileSync(path.join(process.cwd(), 'AUTH_FIX_INSTRUCTIONS.md'), fixInstructions);

console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ "Auth session missing" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('');
console.log('üìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
console.log('  - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π Supabase');
console.log('  - –î–æ–±–∞–≤–ª–µ–Ω–∞ fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
console.log('  - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
console.log('  - –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
console.log('');
console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('  1. npm run build');
console.log('  2. npm run deploy:clean');
console.log('  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞');
