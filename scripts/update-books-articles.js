#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫–Ω–∏–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 * PL-001, PL-002, PL-003 (–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞)
 * DL-001 - DL-009 (–î–∏—Ç—è—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞)
 * KP-001 - KP-003 (–ö–Ω–∏–∂–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏)
 * KL-001, KL-002 (–ö–ª–∞—Å–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞)
 * NP-001, NP-002 (–ù–∞—É–∫–æ–≤–æ-–ø–æ–ø—É–ª—è—Ä–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞)
 * IL-001 (–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞)
 * PD-001 (–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫)
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤
const CATEGORY_ARTICLE_PREFIXES = {
  '–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'PL',
  '–î–∏—Ç—è—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'DL', 
  '–ö–Ω–∏–∂–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏': 'KP',
  '–ö–ª–∞—Å–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'KL',
  '–ù–∞—É–∫–æ–≤–æ-–ø–æ–ø—É–ª—è—Ä–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'NP',
  '–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'IL',
  '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫': 'PD'
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∏ –Ω–æ–º–µ—Ä—É
 */
function generateArticle(prefix, number) {
  return `${prefix}-${number.toString().padStart(3, '0')}`
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getArticlePrefixForCategory(categoryName) {
  return CATEGORY_ARTICLE_PREFIXES[categoryName] || null
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
 */
async function fixEmptyCategories() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')

    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const { data: booksWithoutCategory, error: fetchError } = await supabase
      .from('books')
      .select('id, title, author, category')
      .or('category.is.null,category.eq.')

    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${fetchError.message}`)
    }

    if (!booksWithoutCategory || booksWithoutCategory.length === 0) {
      console.log('‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      return
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${booksWithoutCategory.length} –∫–Ω–∏–≥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)

    const updates = []
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    booksWithoutCategory.forEach(book => {
      let suggestedCategory = '–î–∏—Ç—è—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      const title = book.title.toLowerCase()
      const author = book.author.toLowerCase()
      
      // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      if (title.includes('–∫–∞–∑–∫') || title.includes('–¥–∏—Ç—è—á') || title.includes('–º–∞–ª—é–∫') || 
          title.includes('–Ω–∞–π–º–µ–Ω—à') || title.includes('–¥–æ—à–∫—ñ–ª—å–Ω') || title.includes('–º–æ–ª–æ–¥—à') ||
          title.includes('–µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥') || title.includes('–ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω')) {
        suggestedCategory = '–î–∏—Ç—è—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      } else if (title.includes('–ø—ñ–¥–ª—ñ—Ç–∫–æ–≤') || title.includes('—Ä–æ–º–∞–Ω—Ç') || 
                 title.includes('–∫–æ—Ö–∞–Ω') || title.includes('–ª—é–±–æ–≤') || 
                 title.includes('–º—Ä—ñ') || title.includes('–∫–æ—Å–º–æ—Å')) {
        suggestedCategory = '–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      } else if (title.includes('–ª–∞–º–∞') || title.includes('–±–æ–¥—å–æ') || 
                 title.includes('—è–π—Ü–µ') || title.includes('–¥–≤—ñ –±—ñ–ª–∫–∏') || 
                 title.includes('–ø–∞–Ω–¥–∞') || title.includes('—Ç–∏–≥—Ä') || 
                 title.includes('–≥—Ä—É—à–∫')) {
        suggestedCategory = '–ö–Ω–∏–∂–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏'
      } else if (title.includes('–º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü') || title.includes('–º–∞—É–≥–ª—ñ') || 
                 title.includes('—Ä—ñ–∫—ñ-—Ç—ñ–∫—ñ') || title.includes('–∑–∞—Ö–∞—Ä –±–µ—Ä–∫—É—Ç') || 
                 title.includes('–∫–∞–π–¥–∞—à–µ–≤–∞') || title.includes('–µ–Ω–µ–π—ñ–¥–∞') || 
                 title.includes('–∞–ª—ñ—Å–∞')) {
        suggestedCategory = '–ö–ª–∞—Å–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      } else if (title.includes('–µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥') || title.includes('–ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω') || 
                 title.includes('—à–∫–æ–ª–∞') || title.includes('–µ–º–æ—Ü—ñ–π–Ω') || 
                 title.includes('—Ç—ñ–ª–æ') || title.includes('—Å–º–∞—Ä—Ç—Ñ–æ–Ω') || 
                 title.includes('–ø–ª–∞—Å—Ç–∏–∫')) {
        suggestedCategory = '–ù–∞—É–∫–æ–≤–æ-–ø–æ–ø—É–ª—è—Ä–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      } else if (title.includes('—É–∫—Ä–∞—ó–Ω') || title.includes('—ñ—Å—Ç–æ—Ä') || 
                 title.includes('—á–∏—Ç–∞—î–º–æ –ø—Ä–æ')) {
        suggestedCategory = '–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      } else if (title.includes('–ø—Å–∏—Ö–æ–ª–æ–≥') || title.includes('—Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç') || 
                 title.includes('–µ–º–æ—Ü—ñ–π–Ω') || title.includes('–µ—Ñ–µ–∫—Ç–∏–≤–Ω') || 
                 title.includes('—Å–ø–∞—Ç–∏') || title.includes('—Å–º–∏—Å–ª') || 
                 title.includes('—ñ–Ω—Ç–µ–ª–µ–∫—Ç') || title.includes('–µ—Å—Å–µ–Ω—Ü—ñ–∞–ª')) {
        suggestedCategory = '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫'
      }

      updates.push({
        id: book.id,
        category: suggestedCategory,
        title: book.title
      })
    })

    console.log(`\nüìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`)
    updates.slice(0, 10).forEach(update => {
      console.log(`  ${update.title} ‚Üí ${update.category}`)
    })
    
    if (updates.length > 10) {
      console.log(`  ... –∏ –µ—â–µ ${updates.length - 10} –∫–Ω–∏–≥`)
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let successCount = 0
    let errorCount = 0

    for (const update of updates) {
      try {
        const { error } = await supabase
          .from('books')
          .update({ category: update.category })
          .eq('id', update.id)

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${update.title}: ${error.message}`)
          errorCount++
        } else {
          console.log(`‚úÖ ${update.title} ‚Üí ${update.category}`)
          successCount++
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${update.title}: ${err.message}`)
        errorCount++
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`)
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`)
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∫–Ω–∏–≥
 */
async function updateBooksArticles() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫–Ω–∏–≥...')

    // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await fixEmptyCategories()

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const { data: books, error: fetchError } = await supabase
      .from('books')
      .select('id, title, author, category, article, created_at')
      .order('category')
      .order('created_at')

    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${fetchError.message}`)
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const booksByCategory = {}
    books.forEach(book => {
      if (!booksByCategory[book.category]) {
        booksByCategory[book.category] = []
      }
      booksByCategory[book.category].push(book)
    })

    const updates = []
    let totalUpdated = 0

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (const [categoryName, categoryBooks] of Object.entries(booksByCategory)) {
      const prefix = getArticlePrefixForCategory(categoryName)
      
      if (!prefix) {
        console.log(`‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
        continue
      }

      console.log(`\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryName} (${categoryBooks.length} –∫–Ω–∏–≥)`)
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
      categoryBooks.sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã
      categoryBooks.forEach((book, index) => {
        const articleNumber = index + 1
        const newArticle = generateArticle(prefix, articleNumber)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (book.article !== newArticle) {
          updates.push({
            id: book.id,
            article: newArticle,
            title: book.title,
            category: categoryName
          })
          totalUpdated++
        }
      })
    }

    console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ ${updates.length} –∫–Ω–∏–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤`)

    if (updates.length === 0) {
      console.log('‚úÖ –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã')
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    console.log('\nüìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:')
    updates.slice(0, 10).forEach(update => {
      console.log(`  ${update.title} (${update.category}) ‚Üí ${update.article}`)
    })
    
    if (updates.length > 10) {
      console.log(`  ... –∏ –µ—â–µ ${updates.length - 10} –∫–Ω–∏–≥`)
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })

    const answer = await new Promise(resolve => {
      rl.question('\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ', resolve)
    })
    
    rl.close()

    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      console.log('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
      return
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏
    const batchSize = 50
    let successCount = 0
    let errorCount = 0

    for (let i = 0; i < updates.length; i += batchSize) {
      const batch = updates.slice(i, i + batchSize)
      
      console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á ${Math.floor(i / batchSize) + 1}/${Math.ceil(updates.length / batchSize)} (${batch.length} –∫–Ω–∏–≥)`)
      
      for (const update of batch) {
        try {
          const { error } = await supabase
            .from('books')
            .update({ article: update.article })
            .eq('id', update.id)

          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.title}: ${error.message}`)
            errorCount++
          } else {
            console.log(`‚úÖ ${update.title} ‚Üí ${update.article}`)
            successCount++
          }
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.title}: ${err.message}`)
          errorCount++
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < updates.length) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`)
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`)
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)
    console.log(`  üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount + errorCount}`)

    if (successCount > 0) {
      console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
 */
async function showArticleStats() {
  try {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∫–Ω–∏–≥:\n')

    const { data: books, error } = await supabase
      .from('books')
      .select('category, article')
      .not('article', 'is', null)

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`)
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const stats = {}
    books.forEach(book => {
      if (!stats[book.category]) {
        stats[book.category] = {
          total: 0,
          articles: []
        }
      }
      stats[book.category].total++
      stats[book.category].articles.push(book.article)
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Object.entries(stats).forEach(([category, data]) => {
      const prefix = getArticlePrefixForCategory(category)
      console.log(`üìÇ ${category}:`)
      console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${data.total}`)
      console.log(`   –ü—Ä–µ—Ñ–∏–∫—Å: ${prefix || '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}`)
      
      if (prefix) {
        const articles = data.articles.sort()
        console.log(`   –ê—Ä—Ç–∏–∫—É–ª—ã: ${articles.slice(0, 5).join(', ')}${articles.length > 5 ? '...' : ''}`)
      }
      console.log('')
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message)
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2]

  switch (command) {
    case 'stats':
      await showArticleStats()
      break
    case 'fix-categories':
      await fixEmptyCategories()
      break
    case 'update':
      await updateBooksArticles()
      break
    default:
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
      console.log('  node update-books-articles.js stats           - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
      console.log('  node update-books-articles.js fix-categories  - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      console.log('  node update-books-articles.js update          - –æ–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã')
      break
  }
}

main().catch(console.error)
