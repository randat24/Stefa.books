#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏
 * –£–¥–∞–ª—è–µ—Ç –∫–Ω–∏–≥–∏ —Å –∫–æ–¥–∞–º–∏ PL-001, DL-001, KP-001 –∏ —Ç.–¥.
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

// –ö–æ–¥—ã –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏
const addedBookCodes = [
  'PL-001', 'PL-002', 'PL-003', 'NP-001', 'KL-001', 'DL-001', 'DL-002', 
  'KP-001', 'DL-003', 'KP-002', 'KP-003', 'DL-004', 'DL-005', 'IL-001', 
  'DL-006', 'DL-007', 'KL-002', 'DL-008', 'NP-002', 'PD-001', 'DL-009'
];

async function deleteBook(code) {
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/books?code=eq.${encodeURIComponent(code)}`, {
      method: 'DELETE',
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Prefer': 'return=minimal'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    return { success: true };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function getBooksCount() {
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/books?select=*&limit=1`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Prefer': 'count=exact'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const count = response.headers.get('content-range');
    return count ? parseInt(count.split('/')[1]) : 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', error.message);
    return 0;
  }
}

async function getBooksByCodes(codes) {
  try {
    const codesParam = codes.map(code => `code.eq.${encodeURIComponent(code)}`).join(',');
    const response = await fetch(`${supabaseUrl}/rest/v1/books?select=code,title,author&or=(${codesParam})`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const books = await response.json();
    return books;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error.message);
    return [];
  }
}

async function deleteBooks() {
  console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥...\n');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å...');
  const existingBooks = await getBooksByCodes(addedBookCodes);
  
  if (existingBooks.length === 0) {
    console.log('‚úÖ –ö–Ω–∏–≥–∏ —Å –Ω–∞—à–∏–º–∏ –∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return { successCount: 0, errorCount: 0 };
  }
  
  console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${existingBooks.length}\n`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
  existingBooks.forEach(book => {
    console.log(`  ${book.code} - ${book.title} (${book.author})`);
  });
  
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (let i = 0; i < existingBooks.length; i++) {
    const book = existingBooks[i];
    
    try {
      console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É ${i + 1}/${existingBooks.length}: "${book.title}" (${book.code})`);
      
      const result = await deleteBook(book.code);
      
      if (result.success) {
        console.log(`‚úÖ –ö–Ω–∏–≥–∞ "${book.title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
        successCount++;
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ "${book.title}":`, result.error);
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 200));
      
    } catch (err) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ "${book.title}":`, err.message);
      errorCount++;
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function main() {
  console.log('üóëÔ∏è  –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ Stefa.Books\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
  const initialCount = await getBooksCount();
  console.log(`üìö –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: ${initialCount}\n`);
  
  // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏
  const result = await deleteBooks();
  
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
  const finalCount = await getBooksCount();
  const deletedBooks = initialCount - finalCount;
  
  console.log('\nüéâ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
  console.log(`üìö –ö–Ω–∏–≥ –±—ã–ª–æ: ${initialCount}`);
  console.log(`üìö –ö–Ω–∏–≥ —Å—Ç–∞–ª–æ: ${finalCount}`);
  console.log(`‚ûñ –£–¥–∞–ª–µ–Ω–æ: ${deletedBooks}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${result.successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errorCount}`);
  
  if (result.errorCount === 0) {
    console.log('\nüéä –í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–Ω–∏–≥: ${finalCount} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~105 –∫–∞–∫ –≤ Google Sheets)`);
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–Ω–∏–≥–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { deleteBooks, getBooksCount, getBooksByCodes };
