#!/usr/bin/env node

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï GOOGLE SHEETS –° CLOUDINARY –°–°–´–õ–ö–ê–ú–ò
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ Google Drive —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ Cloudinary —Å—Å—ã–ª–∫–∏
 */

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { google } = require('googleapis');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { createClient } = require('@supabase/supabase-js');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const fs = require('fs');
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets API
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});

const sheets = google.sheets({ version: 'v4', auth });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getBooksWithCloudinaryCovers() {
  try {
    const { data, error } = await supabase
      .from('books')
      .select('code, title, cover_url')
      .like('cover_url', '%cloudinary%')
      .order('code');
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
 */
async function getSheetData() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.GOOGLE_SPREADSHEET_ID,
      range: '–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥!A:Z'
    });
    
    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
      return [];
    }
    
    return rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    return [];
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets —Å –Ω–æ–≤—ã–º–∏ Cloudinary —Å—Å—ã–ª–∫–∞–º–∏
 */
async function updateGoogleSheets(rows, booksWithCovers) {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∫–Ω–∏–≥ –ø–æ –∫–æ–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const booksByCode = {};
    booksWithCovers.forEach(book => {
      booksByCode[book.code] = book;
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å URL –æ–±–ª–æ–∂–µ–∫ (–∫–æ–ª–æ–Ω–∫–∞ K, –∏–Ω–¥–µ–∫—Å 10)
    const coverUrlColumnIndex = 10;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updates = [];
    let updateCount = 0;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const bookCode = row[0] || '';
      const currentCoverUrl = row[coverUrlColumnIndex] || '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ —Å Cloudinary –æ–±–ª–æ–∂–∫–æ–π
      const book = booksByCode[bookCode];
      if (book && currentCoverUrl !== book.cover_url) {
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–∫–∏
        rows[i][coverUrlColumnIndex] = book.cover_url;
        
        updates.push({
          range: `–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥!K${i + 1}`,
          values: [[book.cover_url]]
        });
        
        updateCount++;
        console.log(`üìñ –û–±–Ω–æ–≤–ª—è–µ–º ${bookCode}: ${book.title}`);
        console.log(`   –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞: ${currentCoverUrl}`);
        console.log(`   –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: ${book.cover_url}`);
      }
    }
    
    if (updates.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
      return { success: true, updated: 0 };
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –ø–æ 10
    const batchSize = 10;
    for (let i = 0; i < updates.length; i += batchSize) {
      const batch = updates.slice(i, i + batchSize);
      
      const request = {
        spreadsheetId: process.env.GOOGLE_SPREADSHEET_ID,
        resource: {
          valueInputOption: 'RAW',
          data: batch
        }
      };
      
      await sheets.spreadsheets.values.batchUpdate(request);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞—Ç—á ${Math.floor(i / batchSize) + 1}/${Math.ceil(updates.length / batchSize)}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < updates.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    return { success: true, updated: updateCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï GOOGLE SHEETS –° CLOUDINARY –°–°–´–õ–ö–ê–ú–ò');
  console.log('=' .repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!process.env.GOOGLE_SPREADSHEET_ID) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GOOGLE_SPREADSHEET_ID');
      process.exit(1);
    }
    
    console.log(`‚úÖ Google Sheets ID: ${process.env.GOOGLE_SPREADSHEET_ID}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏
    console.log('üìö –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏...');
    const booksWithCovers = await getBooksWithCloudinaryCovers();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${booksWithCovers.length} –∫–Ω–∏–≥ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏`);
    
    if (booksWithCovers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    const rows = await getSheetData();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets...');
    const result = await updateGoogleSheets(rows, booksWithCovers);
    
    if (result.success) {
      console.log('\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
      console.log('=' .repeat(60));
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated} —Å—Å—ã–ª–æ–∫`);
      console.log(`üìä –í—Å–µ–≥–æ –∫–Ω–∏–≥ —Å Cloudinary –æ–±–ª–æ–∂–∫–∞–º–∏: ${booksWithCovers.length}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const resultData = {
        timestamp: new Date().toISOString(),
        spreadsheetId: process.env.GOOGLE_SPREADSHEET_ID,
        totalBooksWithCovers: booksWithCovers.length,
        updatedLinks: result.updated,
        books: booksWithCovers
      };
      
      fs.writeFileSync('google-sheets-update-results.json', JSON.stringify(resultData, null, 2));
      console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: google-sheets-update-results.json`);
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result.error);
    }
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
