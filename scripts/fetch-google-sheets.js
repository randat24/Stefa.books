#!/usr/bin/env node

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ SQL —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets API
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
});

const sheets = google.sheets({ version: 'v4', auth });

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
 */
async function fetchGoogleSheetsData(spreadsheetId, range) {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: spreadsheetId,
      range: range,
    });
    
    return response.data.values;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    return null;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SQL INSERT
 */
function convertToSQL(data, startIndex = 1) {
  if (!data || data.length < 2) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    return '';
  }
  
  const headers = data[0];
  const rows = data.slice(1);
  
  let sql = '-- ============================================================================\n';
  sql += '-- IMPORT FROM GOOGLE SHEETS\n';
  sql += '-- ============================================================================\n\n';
  
  sql += '-- –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n';
  sql += 'DELETE FROM public.book_authors;\n';
  sql += 'DELETE FROM public.books;\n';
  sql += 'DELETE FROM public.authors;\n\n';
  
  sql += '-- –ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥\n';
  sql += 'INSERT INTO "public"."books" (\n';
  sql += '    "id", "code", "title", "author", "category", "subcategory",\n';
  sql += '    "description", "short_description", "isbn", "pages", "age_range",\n';
  sql += '    "language", "publisher", "publication_year", "cover_url", "status",\n';
  sql += '    "available", "qty_total", "qty_available", "price_uah", "location",\n';
  sql += '    "rating", "rating_count", "badges", "tags", "search_vector",\n';
  sql += '    "search_text", "created_at", "updated_at"\n';
  sql += ') VALUES\n';
  
  const values = [];
  
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    if (row.length === 0) continue;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    const book = {};
    headers.forEach((header, index) => {
      book[header] = row[index] || null;
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
    const value = generateBookSQL(book, i + startIndex);
    values.push(value);
  }
  
  sql += values.join(',\n') + ';\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
  sql += '-- –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤\n';
  sql += 'INSERT INTO public.authors (name, created_at)\n';
  sql += 'SELECT DISTINCT\n';
  sql += '    author,\n';
  sql += '    NOW()\n';
  sql += 'FROM public.books\n';
  sql += 'WHERE author IS NOT NULL\n';
  sql += 'AND author NOT IN (SELECT name FROM public.authors);\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
  sql += '-- –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏\n';
  sql += 'INSERT INTO public.book_authors (book_id, author_id, role)\n';
  sql += 'SELECT\n';
  sql += '    b.id,\n';
  sql += '    a.id,\n';
  sql += '    \'author\'\n';
  sql += 'FROM public.books b\n';
  sql += 'JOIN public.authors a ON b.author = a.name;\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  sql += '-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n';
  sql += 'SELECT\n';
  sql += '    \'Import from Google Sheets completed!\' as status,\n';
  sql += '    (SELECT COUNT(*) FROM public.books) as books_count,\n';
  sql += '    (SELECT COUNT(*) FROM public.authors) as authors_count,\n';
  sql += '    (SELECT COUNT(*) FROM public.book_authors) as book_authors_count;\n';
  
  return sql;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
 */
function generateBookSQL(book, index) {
  const id = `gen_random_uuid()`;
  const code = book['–ö–æ–¥ –∫–Ω–∏–≥–∏'] || `'BOOK${index}'`;
  const title = book['–ù–∞–∑–≤–∞–Ω–∏–µ'] || `'–ö–Ω–∏–≥–∞ ${index}'`;
  const author = book['–ê–≤—Ç–æ—Ä'] || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä';
  const category = book['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
  const description = book['–û–ø–∏—Å'] || null;
  const isbn = book['ISBN'] || null;
  const pages = book['–°—Ç–æ—Ä—ñ–Ω–∫–∏'] || null;
  const ageRange = book['–í—ñ–∫'] || null;
  const language = book['–ú–æ–≤–∞'] || 'uk';
  const publisher = book['–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ'] || null;
  const year = book['–†—ñ–∫'] || null;
  const coverUrl = book['–§–æ—Ç–æ (URL)'] || null;
  const status = 'available';
  const available = true;
  const qtyTotal = 1;
  const qtyAvailable = 1;
  const price = book['–¶—ñ–Ω–∞'] || null;
  const location = '–≤—É–ª. –ú–∞—Ä—ñ—É–ø–æ–ª—å—Å—å–∫–∞ 13/2, –ú–∏–∫–æ–ª–∞—ó–≤';
  const rating = null;
  const ratingCount = 0;
  const badges = '{}';
  const tags = null;
  
  // –°–æ–∑–¥–∞–µ–º search_text
  const searchText = `${title} ${author} ${category}`;
  
  return `    (${id}, ${code}, ${escapeString(title)}, ${escapeString(author)}, ${escapeString(category)}, null, ${escapeString(description)}, null, ${escapeString(isbn)}, ${pages}, ${escapeString(ageRange)}, ${escapeString(language)}, ${escapeString(publisher)}, ${year}, ${escapeString(coverUrl)}, ${escapeString(status)}, ${available}, ${qtyTotal}, ${qtyAvailable}, ${price}, ${escapeString(location)}, ${rating}, ${ratingCount}, ${badges}, ${escapeString(tags)}, to_tsvector('simple', ${escapeString(searchText)}), ${escapeString(searchText)}, NOW(), NOW())`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è SQL
 */
function escapeString(str) {
  if (str === null || str === undefined) return 'null';
  return `'${str.replace(/'/g, "''")}'`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã...');
  
  // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï
  const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID || 'your_spreadsheet_id';
  const range = process.env.GOOGLE_RANGE || 'Sheet1!A:Z';
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await fetchGoogleSheetsData(spreadsheetId, range);
    
    if (!data) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã');
      return;
    }
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SQL
    const sql = convertToSQL(data);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const outputPath = path.join(__dirname, 'import-from-google-sheets-generated.sql');
    fs.writeFileSync(outputPath, sql, 'utf8');
    
    console.log(`‚úÖ SQL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    console.log(`üìö –ì–æ—Ç–æ–≤–æ –∫ –∏–º–ø–æ—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main, fetchGoogleSheetsData, convertToSQL };
