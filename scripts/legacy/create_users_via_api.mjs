import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
    console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
const usersToCreate = [
    {
        email: 'admin@stefa-books.com.ua',
        name: '–ì–æ–ª–æ–≤–Ω–∏–π –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'admin',
        phone: '+38 (063) 856-54-14',
        subscription_type: 'premium',
        status: 'active',
        notes: '–ì–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ Stefa.Books'
    },
    {
        email: 'anastasia@stefa-books.com.ua',
        name: '–ê–Ω–∞—Å—Ç–∞—Å—ñ—è',
        role: 'admin',
        phone: '+38 (050) 123-45-67',
        subscription_type: 'premium',
        status: 'active',
        notes: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ Stefa.Books'
    },
    {
        email: 'randat24@gmail.com',
        name: '–†–æ–∑—Ä–æ–±–Ω–∏–∫',
        role: 'admin',
        phone: '+38 (067) 987-65-43',
        subscription_type: 'premium',
        status: 'active',
        notes: '–†–æ–∑—Ä–æ–±–Ω–∏–∫ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç—É Stefa.Books'
    }
];

async function createUsers() {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Stefa.Books...\n');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const { data: existingUsers, error: fetchError } = await supabase
        .from('users')
        .select('email, name, role, status')
        .in('email', usersToCreate.map(u => u.email));

    if (fetchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', fetchError.message);
        return;
    }

    console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', existingUsers?.length || 0);
    if (existingUsers && existingUsers.length > 0) {
        existingUsers.forEach(user => {
            console.log(`  - ${user.email} (${user.role}, ${user.status})`);
        });
    }

    console.log('\nüë• –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    for (const userData of usersToCreate) {
        try {
            console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${userData.email}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = existingUsers?.find(u => u.email === userData.email);

            if (existingUser) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log(`  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
                const { data: updatedUser, error: updateError } = await supabase
                    .from('users')
                    .update({
                        name: userData.name,
                        role: userData.role,
                        phone: userData.phone,
                        subscription_type: userData.subscription_type,
                        status: userData.status,
                        notes: userData.notes,
                        updated_at: new Date().toISOString()
                    })
                    .eq('email', userData.email)
                    .select();

                if (updateError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
                } else {
                    console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedUser[0]?.name}`);
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log(`  ‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
                const { data: newUser, error: createError } = await supabase
                    .from('users')
                    .insert([{
                        id: crypto.randomUUID(),
                        ...userData,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    }])
                    .select();

                if (createError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createError.message}`);
                } else {
                    console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser[0]?.name}`);
                }
            }

        } catch (error) {
            console.error(`  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${userData.email}:`, error.message);
        }

        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const { data: finalUsers, error: finalError } = await supabase
        .from('users')
        .select('email, name, role, phone, subscription_type, status, created_at, updated_at')
        .in('email', usersToCreate.map(u => u.email))
        .order('created_at', { ascending: true });

    if (finalError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', finalError.message);
        return;
    }

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('=' .repeat(80));
    
    if (finalUsers && finalUsers.length > 0) {
        finalUsers.forEach((user, index) => {
            console.log(`${index + 1}. ${user.name} (${user.email})`);
            console.log(`   –†–æ–ª—å: ${user.role}`);
            console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription_type}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${user.status}`);
            console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('uk-UA')}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(user.updated_at).toLocaleString('uk-UA')}`);
            console.log('');
        });
    } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const { data: allUsers, error: statsError } = await supabase
        .from('users')
        .select('role, status');

    if (!statsError && allUsers) {
        const totalUsers = allUsers.length;
        const adminUsers = allUsers.filter(u => u.role === 'admin').length;
        const activeUsers = allUsers.filter(u => u.status === 'active').length;

        console.log('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
        console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminUsers}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    }

    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
createUsers().catch(console.error);
