import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkAuthUsers() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth.users...\n');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth.users
        const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
        
        if (authError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π auth.users:', authError.message);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ auth.users:', authUsers?.users?.length || 0);
            if (authUsers?.users && authUsers.users.length > 0) {
                authUsers.users.forEach(user => {
                    console.log(`   - ${user.email} (${user.id}) - ${user.email_confirmed_at ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}`);
                });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ public.users
        const { data: publicUsers, error: publicError } = await supabase
            .from('users')
            .select('id, email, name, role');

        if (publicError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π public.users:', publicError.message);
        } else {
            console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ public.users:', publicUsers?.length || 0);
            if (publicUsers && publicUsers.length > 0) {
                publicUsers.forEach(user => {
                    console.log(`   - ${user.email} (${user.id}) - ${user.role}`);
                });
            }
        }

        console.log('\nüéØ –ü—Ä–æ–±–ª–µ–º–∞:');
        console.log('1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ public.users');
        console.log('2. –ù–æ —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—â–µ—Ç –∏—Ö –≤ auth.users');
        console.log('3. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase Auth');

        console.log('\nüí° –†–µ—à–µ–Ω–∏–µ:');
        console.log('1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase Auth —á–µ—Ä–µ–∑ Dashboard');
        console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('3. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å public.users');

    } catch (error) {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAuthUsers().catch(console.error);
