const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ú–∞–ø–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ UUID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryMappings = [
  {
    keywords: ['–∫–∞–∑–∫', '–∫–∞–∑–∫–∞', '–ø—Ä–∏–Ω—Ü–µ—Å', '–∫–æ—Ä–æ–ª—å', '—á–∞—Ä—ñ–≤–Ω'],
    categoryId: 'd265df66-d674-4dbd-bdcf-00f6de62868e', // –ö–∞–∑–∫–∏
    categoryName: '–ö–∞–∑–∫–∏'
  },
  {
    keywords: ['–ø—Ä–∏–≥–æ–¥', '–ø–æ–¥–æ—Ä–æ–∂', '–º–∞–Ω–¥—Ä'],
    categoryId: '4bad1750-0724-4967-8228-6cb2167a7c1b', // –ü—Ä–∏–≥–æ–¥–∏
    categoryName: '–ü—Ä–∏–≥–æ–¥–∏'
  },
  {
    keywords: ['—Ñ–µ–Ω—Ç–µ–∑', '–º–∞–≥—ñ', '—á–∞—Ä—ñ–≤', '–¥—Ä–∞–∫–æ–Ω', '–ª–∏—Ü–∞—Ä'],
    categoryId: 'acfd8e90-277d-493d-9948-3a61cf4ed654', // –§–µ–Ω—Ç–µ–∑—ñ
    categoryName: '–§–µ–Ω—Ç–µ–∑—ñ'
  },
  {
    keywords: ['–¥–µ—Ç–µ–∫—Ç–∏–≤', '–∑–∞–≥–∞–¥–∫', '—Ç–∞—î–º–Ω–∏—á', '–∑–ª–æ—á–∏–Ω', '–º–∞–ª—å—Ç—ñ–π—Å—å–∫'],
    categoryId: 'a6dded07-680e-4156-b991-1b56f2185f0f', // –ü–æ–≤—ñ—Å—Ç—å (–±–ª–∏–∑–∫–æ –∫ –¥–µ—Ç–µ–∫—Ç–∏–≤—É)
    categoryName: '–ü–æ–≤—ñ—Å—Ç—å'
  },
  {
    keywords: ['–µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥—ñ', '–ø—ñ–∑–Ω–∞–≤–∞–ª—å', '–Ω–∞–≤—á–∞–ª—å–Ω', '–∑–Ω–∞–Ω–Ω', '–∫–æ—Å–º–æ—Å', '—á–æ–º—É—Å–∏–∫'],
    categoryId: 'c977cf09-bb47-4707-ab8d-292b54107051', // –ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ
    categoryName: '–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ'
  }
];

async function assignCategories() {
  try {
    console.log('üìö –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å UUID...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, description, category_id')
      .is('category_id', null)
      .limit(20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞

    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: ${booksError.message}`);
    }

    console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n`);

    let assigned = 0;
    const assignments = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    for (const book of books) {
      const bookText = `${book.title} ${book.author} ${book.description || ''}`.toLowerCase();
      let bestCategory = null;
      let bestScore = 0;

      // –ò—â–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      for (const mapping of categoryMappings) {
        let score = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∫–Ω–∏–≥–∏
        for (const keyword of mapping.keywords) {
          if (bookText.includes(keyword.toLowerCase())) {
            score += 1;
          }
        }

        if (score > bestScore) {
          bestScore = score;
          bestCategory = mapping;
        }
      }

      if (bestCategory && bestScore > 0) {
        assignments.push({
          bookId: book.id,
          bookTitle: book.title,
          categoryId: bestCategory.categoryId,
          categoryName: bestCategory.categoryName,
          score: bestScore
        });
        assigned++;
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${assigned} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:\n`);
    assignments.forEach(a => {
      console.log(`   "${a.bookTitle}" ‚Üí ${a.categoryName} (score: ${a.score})`);
    });

    if (assignments.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return;
    }

    console.log('\n‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    let successCount = 0;

    for (const assignment of assignments.slice(0, 5)) { // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
      try {
        console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º "${assignment.bookTitle}"...`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –Ω–∞–ø—Ä—è–º—É—é
        const { data, error } = await supabase.rpc('update_book_category', {
          book_id: assignment.bookId,
          new_category_id: assignment.categoryId
        });

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ RPC –¥–ª—è "${assignment.bookTitle}": ${error.message}`);

          // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π update —Ç–æ–ª—å–∫–æ —Å category_id
          const { error: updateError } = await supabase
            .from('books')
            .update({ category_id: assignment.categoryId })
            .eq('id', assignment.bookId);

          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ update: ${updateError.message}`);
          } else {
            successCount++;
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π update`);
          }
        } else {
          successCount++;
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ RPC`);
        }
      } catch (err) {
        console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è "${assignment.bookTitle}": ${err.message}`);
      }
    }

    console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${assignments.slice(0, 5).length} –∏–∑ ${assignments.length} –∫–Ω–∏–≥`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${successCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: updatedBooks, error: checkError } = await supabase
      .from('books')
      .select('id, title, category_id')
      .not('category_id', 'is', null)
      .limit(10);

    if (!checkError && updatedBooks) {
      console.log(`\nüìà –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:`);
      updatedBooks.forEach(book => {
        console.log(`   "${book.title}" ‚Üí ${book.category_id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

assignCategories();