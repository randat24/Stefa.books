#!/usr/bin/env node

/**
 * –ó–ê–ì–†–£–ó–ö–ê –û–ë–õ–û–ñ–ï–ö –í CLOUDINARY
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫–∏ –≤ Cloudinary
 */

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { createClient } = require('@supabase/supabase-js');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { v2: cloudinary } = require('cloudinary');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const https = require('https');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const fs = require('fs');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const path = require('path');
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç file ID –∏–∑ Google Drive URL
 */
function extractFileId(url) {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([^\/]+)/,
    /drive\.google\.com\/open\?id=([^\/]+)/,
    /drive\.google\.com\/uc\?export=view&id=([^&]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return null;
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive
 */
function downloadFile(url, destination) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(destination);
    
    const request = https.get(url, (response) => {
      if (response.statusCode === 302 || response.statusCode === 301) {
        const redirectUrl = response.headers.location;
        console.log(`   –°–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—É: ${redirectUrl}`);
        
        const redirectRequest = https.get(redirectUrl, (redirectResponse) => {
          redirectResponse.pipe(file);
          
          file.on('finish', () => {
            file.close();
            resolve(destination);
          });
        });
        
        redirectRequest.on('error', reject);
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve(destination);
      });
    });
    
    request.on('error', reject);
  });
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
 */
async function uploadToCloudinary(filePath, publicId) {
  try {
    const result = await cloudinary.uploader.upload(filePath, {
      public_id: `stefa-books/${publicId}`,
      folder: 'stefa-books',
      resource_type: 'image',
      transformation: [
        { width: 300, height: 400, crop: 'fill', quality: 'auto' }
      ]
    });
    
    return result.secure_url;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:`, error.message);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
function cleanupTempFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function updateCoverUrl(bookId, newUrl) {
  try {
    const { error } = await supabase
      .from('books')
      .update({ cover_url: newUrl })
      .eq('id', bookId);
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId}:`, error.message);
    return false;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –∫–Ω–∏–≥–∏
 */
async function processBookCover(book, index, total) {
  console.log(`\nüìñ [${index + 1}/${total}] ${book.title}`);
  console.log(`   –ö–æ–¥: ${book.code}`);
  
  if (!book.cover_url) {
    console.log('   ‚ö†Ô∏è  –ù–µ—Ç URL –¥–ª—è –æ–±–ª–æ–∂–∫–∏');
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –æ–±–ª–æ–∂–∫–∞ –≤ Cloudinary
  if (book.cover_url.includes('cloudinary.com')) {
    console.log(`   ‚è≠Ô∏è  –£–∂–µ –≤ Cloudinary: ${book.cover_url}`);
    return book.cover_url;
  }
  
  try {
    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º file ID –∏–∑ Google Drive URL
    const fileId = extractFileId(book.cover_url);
    if (!fileId) {
      console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file ID –∏–∑ Google Drive URL');
      return null;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const directUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
    
    console.log(`   üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å Google Drive...`);
    
    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const fileExtension = '.jpg';
    const tempFilePath = path.join(tempDir, `${book.code}${fileExtension}`);
    
    // 4. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await downloadFile(directUrl, tempFilePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(tempFilePath);
    if (stats.size < 1000) {
      console.log('   ‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      cleanupTempFile(tempFilePath);
      return null;
    }
    
    console.log(`   üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Cloudinary...`);
    
    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Cloudinary
    const cloudinaryUrl = await uploadToCloudinary(tempFilePath, book.code.toLowerCase());
    
    if (cloudinaryUrl) {
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${cloudinaryUrl}`);
      
      // 6. –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updated = await updateCoverUrl(book.id, cloudinaryUrl);
      if (updated) {
        console.log(`   ‚úÖ URL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // 7. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    cleanupTempFile(tempFilePath);
    
    return cloudinaryUrl;
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ó–ê–ì–†–£–ó–ö–ê –û–ë–õ–û–ñ–ï–ö –í CLOUDINARY');
  console.log('=' .repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
      process.exit(1);
    }
    
    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Cloudinary');
      process.exit(1);
    }
    
    console.log(`‚úÖ Supabase: ${process.env.SUPABASE_URL}`);
    console.log(`‚úÖ Cloudinary: ${process.env.CLOUDINARY_CLOUD_NAME}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: books, error } = await supabase
      .from('books')
      .select('id, code, title, cover_url')
      .not('cover_url', 'is', null);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('‚ùå –ö–Ω–∏–≥–∏ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ —Å –æ–±–ª–æ–∂–∫–∞–º–∏`);
    
    let successCount = 0;
    let errorCount = 0;
    let skipCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < books.length; i++) {
      const book = books[i];
      const result = await processBookCover(book, i, books.length);
      
      if (result) {
        if (result.includes('cloudinary.com')) {
          successCount++;
        } else {
          skipCount++;
        }
      } else {
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < books.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultData = {
      timestamp: new Date().toISOString(),
      totalBooks: books.length,
      successful: successCount,
      skipped: skipCount,
      failed: errorCount,
      books: books.map(book => ({
        id: book.id,
        code: book.code,
        title: book.title,
        originalUrl: book.cover_url,
        processed: true
      }))
    };
    
    fs.writeFileSync('cloudinary-upload-results.json', JSON.stringify(resultData, null, 2));
    
    console.log('\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${books.length}`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: cloudinary-upload-results.json`);
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };