import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã Supabase
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);
const supabaseService = createClient(supabaseUrl, supabaseServiceKey);

async function testAdminAccess() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ anon key
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ anon key...');
    try {
        const { data: booksData, error: booksError } = await supabaseAnon
            .from('books')
            .select('id, title, author')
            .limit(5);

        if (booksError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ anon key:', booksError.message);
        } else {
            console.log('‚úÖ –ö–Ω–∏–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ anon key:', booksData?.length || 0, '–∫–Ω–∏–≥');
        }
    } catch (error) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ anon key:', error.message);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ service key
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ service key...');
    try {
        const { data: booksData, error: booksError } = await supabaseService
            .from('books')
            .select('id, title, author')
            .limit(5);

        if (booksError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ service key:', booksError.message);
        } else {
            console.log('‚úÖ –ö–Ω–∏–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ service key:', booksData?.length || 0, '–∫–Ω–∏–≥');
        }
    } catch (error) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ service key:', error.message);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ anon key
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ anon key...');
    try {
        const { data: usersData, error: usersError } = await supabaseAnon
            .from('users')
            .select('id, name, email, role')
            .limit(5);

        if (usersError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ anon key:', usersError.message);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ anon key:', usersData?.length || 0, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            if (usersData && usersData.length > 0) {
                usersData.forEach(user => {
                    console.log(`   - ${user.name} (${user.email}) - ${user.role}`);
                });
            }
        }
    } catch (error) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ anon key:', error.message);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ service key
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ service key...');
    try {
        const { data: usersData, error: usersError } = await supabaseService
            .from('users')
            .select('id, name, email, role')
            .limit(5);

        if (usersError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ service key:', usersError.message);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ service key:', usersData?.length || 0, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            if (usersData && usersData.length > 0) {
                usersData.forEach(user => {
                    console.log(`   - ${user.name} (${user.email}) - ${user.role}`);
                });
            }
        }
    } catch (error) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ service key:', error.message);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫...');
    try {
        const { data: policiesData, error: policiesError } = await supabaseService
            .from('pg_policies')
            .select('policyname, cmd, qual')
            .eq('tablename', 'users')
            .eq('schemaname', 'public');

        if (policiesError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RLS –ø–æ–ª–∏—Ç–∏–∫:', policiesError.message);
        } else {
            console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users:', policiesData?.length || 0, '–ø–æ–ª–∏—Ç–∏–∫');
            if (policiesData && policiesData.length > 0) {
                policiesData.forEach(policy => {
                    console.log(`   - ${policy.policyname} (${policy.cmd})`);
                });
            }
        }
    } catch (error) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RLS –ø–æ–ª–∏—Ç–∏–∫:', error.message);
    }

    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ï—Å–ª–∏ anon key –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏');
    console.log('2. –ï—Å–ª–∏ service key —Ä–∞–±–æ—Ç–∞–µ—Ç - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ');
    console.log('3. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç anon key, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏');
    console.log('\nüìù –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: fix_rls_users_policy_simple.sql');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAdminAccess().catch(console.error);
