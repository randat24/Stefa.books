#!/usr/bin/env node

/**
 * Frontend Test Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */

import fetch from 'node-fetch';
import { JSDOM } from 'jsdom';

const BASE_URL = 'http://localhost:3000';

async function testPage(page, name) {
    try {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${name}`);
        console.log(`   ${BASE_URL}${page}`);
        
        const response = await fetch(`${BASE_URL}${page}`);
        
        if (!response.ok) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
            return { success: false, status: response.status };
        }
        
        const html = await response.text();
        const dom = new JSDOM(html);
        const document = dom.window.document;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const checks = {
            title: document.querySelector('title')?.textContent || 'N/A',
            hasBooks: document.querySelectorAll('[data-testid="book-card"], .book-card, [class*="book"]').length,
            hasCategories: document.querySelectorAll('[data-testid="category"], .category, [class*="category"]').length,
            hasSearch: !!document.querySelector('input[type="search"], input[placeholder*="–ø–æ–∏—Å–∫"], input[placeholder*="search"]'),
            hasNavigation: !!document.querySelector('nav, header, [role="navigation"]'),
            hasFooter: !!document.querySelector('footer, [role="contentinfo"]')
        };
        
        console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        console.log(`   üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${checks.title}`);
        console.log(`   üìö –ö–Ω–∏–≥–∏ –Ω–∞–π–¥–µ–Ω—ã: ${checks.hasBooks}`);
        console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã: ${checks.hasCategories}`);
        console.log(`   üîç –ü–æ–∏—Å–∫: ${checks.hasSearch ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${checks.hasNavigation ? '‚úÖ' : '‚ùå'}`);
        console.log(`   ü¶∂ –§—É—Ç–µ—Ä: ${checks.hasFooter ? '‚úÖ' : '‚ùå'}`);
        
        return { success: true, checks };
        
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function testAllPages() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');

    const pages = [
        { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
        { path: '/catalog', name: '–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥' },
        { path: '/categories', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        { path: '/about', name: '–û –Ω–∞—Å' },
        { path: '/contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
        { path: '/admin', name: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }
    ];

    const results = [];

    for (const page of pages) {
        const result = await testPage(page.path, page.name);
        results.push({ ...page, ...result });
        console.log('');
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–†–û–ù–¢–ï–ù–î–ê:');
    console.log('=====================================');
    
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${successful}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((successful / results.length) * 100)}%`);
    
    if (failed > 0) {
        console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
        results.filter(r => !r.success).forEach(r => {
            console.log(`   - ${r.name}: ${r.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}`);
        });
    }

    // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const workingPages = results.filter(r => r.success);
    const totalBooks = workingPages.reduce((sum, page) => sum + (page.checks?.hasBooks || 0), 0);
    const pagesWithSearch = workingPages.filter(page => page.checks?.hasSearch).length;
    const pagesWithNavigation = workingPages.filter(page => page.checks?.hasNavigation).length;
    
    console.log('\nüîß –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:');
    console.log('=====================================');
    console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: ${totalBooks}`);
    console.log(`üîç –°—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–∏—Å–∫–æ–º: ${pagesWithSearch}/${workingPages.length}`);
    console.log(`üß≠ –°—Ç—Ä–∞–Ω–∏—Ü —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π: ${pagesWithNavigation}/${workingPages.length}`);

    return results;
}

async function main() {
    console.log('üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Stefa.Books\n');
    
    try {
        await testAllPages();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error);
    }
}

main().catch(console.error);
