#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 105 –∫–Ω–∏–≥ –∏–∑ Google Sheets –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

import { google } from 'googleapis';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // Google Sheets
  spreadsheetId: process.env.GOOGLE_SHEET_ID || 'YOUR_SPREADSHEET_ID',
  range: process.env.GOOGLE_SHEET_RANGE || 'Books!A1:Z105',
  
  // Supabase
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  batchSize: 20, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ —Ä–∞–∑
  dryRun: process.env.DRY_RUN === 'true',
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(CONFIG.supabaseUrl, CONFIG.supabaseServiceKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets
async function authenticateGoogleSheets() {
  try {
    const auth = new google.auth.GoogleAuth({
      keyFile: process.env.GOOGLE_SERVICE_ACCOUNT_KEY_FILE || './google-service-account.json',
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });
    
    const authClient = await auth.getClient();
    return google.sheets({ version: 'v4', auth: authClient });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function getDataFromGoogleSheets() {
  try {
    const sheets = await authenticateGoogleSheets();
    
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...');
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: CONFIG.spreadsheetId,
      range: CONFIG.range,
    });
    
    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = rows[0];
    const dataRows = rows.slice(1);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dataRows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    return { headers, dataRows };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏
function rowToBookObject(headers, row, index) {
  const book = {};
  
  headers.forEach((header, colIndex) => {
    const value = row[colIndex] || '';
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    switch (header.toLowerCase()) {
      case '–Ω–∞–∑–≤–∞':
      case 'title':
        book.title = value;
        break;
      case '–∞–≤—Ç–æ—Ä':
      case 'author':
        book.author = value;
        break;
      case 'isbn':
        book.isbn = value;
        break;
      case '–æ–ø–∏—Å':
      case 'description':
        book.description = value;
        break;
      case '–æ–±–∫–ª–∞–¥–∏–Ω–∫–∞':
      case 'cover_url':
        book.cover_url = value;
        break;
      case '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è':
      case 'category':
        book.category = value;
        break;
      case '–¥–æ—Å—Ç—É–ø–Ω–∞':
      case 'available':
        book.available = value.toLowerCase() === '—Ç–∞–∫' || value.toLowerCase() === 'true' || value === '1';
        break;
    }
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∫–Ω–∏–≥–∏
  const year = new Date().getFullYear();
  const sequence = String(index + 1).padStart(4, '0');
  book.code = `SB-${year}-${sequence}`;
  
  return book;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function loadBooksToDatabase(books) {
  try {
    console.log(`üìö –ó–∞–≥—Ä—É–∑–∫–∞ ${books.length} –∫–Ω–∏–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    
    if (CONFIG.dryRun) {
      console.log('üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      console.log('üìñ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏:', JSON.stringify(books[0], null, 2));
      return { success: true, loaded: 0, updated: 0, errors: 0 };
    }
    
    let loaded = 0;
    const updated = 0;
    let errors = 0;
    const errorMessages = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –±–∞—Ç—á–∞–º–∏
    for (let i = 0; i < books.length; i += CONFIG.batchSize) {
      const batch = books.slice(i, i + CONFIG.batchSize);
      
      try {
        const { error } = await supabase
          .from('books')
          .upsert(batch, { 
            onConflict: 'code',
            ignoreDuplicates: false 
          });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}:`, error.message);
          errors += batch.length;
          errorMessages.push(`–ë–∞—Ç—á ${i + 1}: ${error.message}`);
        } else {
          loaded += batch.length;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥ (–±–∞—Ç—á ${i + 1})`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}:`, error.message);
        errors += batch.length;
        errorMessages.push(`–ë–∞—Ç—á ${i + 1}: ${error.message}`);
      }
    }
    
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
    console.log(`   üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded}`);
    console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    
    if (errorMessages.length > 0) {
      console.log('‚ùå –û—à–∏–±–∫–∏:');
      errorMessages.forEach(error => console.log(`   - ${error}`));
    }
    
    return { success: true, loaded, updated, errors, errorMessages };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function validateBooks(books) {
  const errors = [];
  
  books.forEach((book, index) => {
    if (!book.title) {
      errors.push(`–ö–Ω–∏–≥–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
    }
    if (!book.author) {
      errors.push(`–ö–Ω–∏–≥–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ—Ä`);
    }
  });
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    errors.forEach(error => console.warn(`   - ${error}`));
  }
  
  return errors.length === 0;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ 105 –∫–Ω–∏–≥ –∏–∑ Google Sheets...');
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${CONFIG.spreadsheetId}`);
    console.log(`üìã –î–∏–∞–ø–∞–∑–æ–Ω: ${CONFIG.range}`);
    console.log(`üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${CONFIG.dryRun ? '–í–ö–õ' : '–í–´–ö–õ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const { headers, dataRows } = await getDataFromGoogleSheets();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –∫–Ω–∏–≥
    const books = dataRows
      .filter(row => row.some(cell => cell && cell.trim() !== ''))
      .map((row, index) => rowToBookObject(headers, row, index));
    
    console.log(`üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${books.length} –∫–Ω–∏–≥`);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!validateBooks(books)) {
      console.warn('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await loadBooksToDatabase(books);
    
    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    const reportPath = path.join(__dirname, 'load_105_books_report.json');
    fs.writeFileSync(reportPath, JSON.stringify({
      timestamp: new Date().toISOString(),
      config: CONFIG,
      result: result,
      booksCount: books.length
    }, null, 2));
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export {
  getDataFromGoogleSheets,
  loadBooksToDatabase,
  validateBooks,
  rowToBookObject
};
