#!/usr/bin/env node

/**
 * Full System Check Script
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã Stefa.Books
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function runScript(scriptPath, name) {
    try {
        console.log(`\nüöÄ –ó–∞–ø—É—Å–∫: ${name}`);
        console.log('='.repeat(50));
        
        const { stdout, stderr } = await execAsync(`node ${scriptPath}`);
        
        if (stdout) {
            console.log(stdout);
        }
        
        if (stderr) {
            console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
        }
        
        return { success: true, output: stdout, warnings: stderr };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${name}:`, error.message);
        return { success: false, error: error.message };
    }
}

async function checkSystemRequirements() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...\n');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
        const { stdout: nodeVersion } = await execAsync('node --version');
        console.log(`‚úÖ Node.js: ${nodeVersion.trim()}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
        try {
            const { stdout: pnpmVersion } = await execAsync('pnpm --version');
            console.log(`‚úÖ pnpm: ${pnpmVersion.trim()}`);
        } catch {
            console.log('‚ö†Ô∏è pnpm –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è npm');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        const requiredFiles = [
            'package.json',
            '.env.local',
            'src/lib/supabase.ts',
            'src/app/api/books/route.ts'
        ];
        
        console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
        for (const file of requiredFiles) {
            try {
                await execAsync(`test -f ${file}`);
                console.log(`‚úÖ ${file}`);
            } catch {
                console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error.message);
    }
}

async function main() {
    console.log('üéØ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ STEFA.BOOKS');
    console.log('='.repeat(60));
    console.log('–î–∞—Ç–∞:', new Date().toLocaleString('uk-UA'));
    console.log('='.repeat(60));
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    await checkSystemRequirements();
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await runScript('check-database-structure.js', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    const apiResult = await runScript('test-api-endpoints.js', '–ü—Ä–æ–≤–µ—Ä–∫–∞ API');
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const frontendResult = await runScript('test-frontend.js', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(60));
    
    const results = [
        { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', result: dbResult },
        { name: 'API', result: apiResult },
        { name: '–§—Ä–æ–Ω—Ç–µ–Ω–¥', result: frontendResult }
    ];
    
    results.forEach(({ name, result }) => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${name}: ${result.success ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ü—Ä–æ–±–ª–µ–º—ã'}`);
    });
    
    const allWorking = results.every(r => r.success);
    
    if (allWorking) {
        console.log('\nüéä –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
        console.log('–°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    } else {
        console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´');
        console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö.');
    }
    
    console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∞–π—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log('   pnpm dev');
    console.log('   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
}

main().catch(console.error);
