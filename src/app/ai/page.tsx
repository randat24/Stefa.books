'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { 
  Bot, 
  Send, 
  BookOpen, 
  Lightbulb,
  MessageCircle,
  Sparkles,
  Clock,
  User
} from 'lucide-react'
import { logger } from '@/lib/logger'

interface Message {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  suggestions?: string[]
}

export default function AIPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ Stefa.Books. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á—Ç–µ–Ω–∏—é. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      timestamp: new Date(),
      suggestions: [
        '–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∫–Ω–∏–≥–∏ –¥–ª—è –¥–µ—Ç–µ–π 3-6 –ª–µ—Ç',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?',
        '–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ?',
        '–ö–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É?'
      ]
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsLoading(true)

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const aiResponse = generateAIResponse(inputValue)
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: aiResponse.content,
        timestamp: new Date(),
        suggestions: aiResponse.suggestions
      }

      setMessages(prev => [...prev, aiMessage])
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const generateAIResponse = (userInput: string) => {
    const input = userInput.toLowerCase()
    
    if (input.includes('—Ä–µ–∫–æ–º–µ–Ω–¥') || input.includes('–∫–Ω–∏–≥')) {
      return {
        content: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–ª—è –¥–µ—Ç–µ–π 3-6 –ª–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\nüìö **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏**: "–ö–æ–ª–æ–±–æ–∫", "–†–µ–ø–∫–∞", "–¢–µ—Ä–µ–º–æ–∫"\nüìö **–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∫–Ω–∏–≥–∏**: "–ê–∑–±—É–∫–∞", "–°—á–µ—Ç –¥–æ 10"\nüìö **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã**: –∫–Ω–∏–≥–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π\n\n–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ?',
        suggestions: [
          '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥',
          '–ö–Ω–∏–≥–∏ –¥–ª—è –¥–µ—Ç–µ–π 6-12 –ª–µ—Ç',
          '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–∏–≥—É?'
        ]
      }
    }
    
    if (input.includes('–ø–æ–¥–ø–∏—Å–∫')) {
      return {
        content: '–£ –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n\nüü¢ **Mini** (300 ‚Ç¥/–º–µ—Å) - 1 –∫–Ω–∏–≥–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\nüü° **Maxi** (500 ‚Ç¥/–º–µ—Å) - 2 –∫–Ω–∏–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\nüü† **Premium** (1500 ‚Ç¥/–º–µ—Å) - 3 –∫–Ω–∏–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
        suggestions: [
          '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
          '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?',
          '–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?'
        ]
      }
    }
    
    if (input.includes('–∞—Ä–µ–Ω–¥') || input.includes('–≤–∑—è—Ç—å')) {
      return {
        content: '–î–ª—è –∞—Ä–µ–Ω–¥—ã –∫–Ω–∏–≥–∏:\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å"\n3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏\n4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–Ω–∏–≥—É\n\n–ö–Ω–∏–≥–∏ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü.',
        suggestions: [
          '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
          '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å?',
          '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É?'
        ]
      }
    }
    
    if (input.includes('–ø–æ–ø—É–ª—è—Ä–Ω') || input.includes('–ª—É—á—à')) {
      return {
        content: '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ —É –Ω–∞—à–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π:\n\n‚≠ê "–ö–æ–ª–æ–±–æ–∫" - –∫–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è –º–∞–ª—ã—à–µ–π\n‚≠ê "–ê–∑–±—É–∫–∞" - –æ–±—É—á–µ–Ω–∏–µ –±—É–∫–≤–∞–º\n‚≠ê "–°–∫–∞–∑–∫–∏ –ê–Ω–¥–µ—Ä—Å–µ–Ω–∞" - –¥–ª—è –¥–µ—Ç–µ–π –ø–æ—Å—Ç–∞—Ä—à–µ\n‚≠ê "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –ù–µ–∑–Ω–∞–π–∫–∏" - –≤–µ—Å–µ–ª—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n\n–í—Å–µ —ç—Ç–∏ –∫–Ω–∏–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ!',
        suggestions: [
          '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏',
          '–ö–Ω–∏–≥–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É',
          '–ù–æ–≤–∏–Ω–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞'
        ]
      }
    }
    
    return {
      content: '–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ù–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏\n‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ—Ä–≤–∏—Å–µ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É!',
      suggestions: [
        '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?',
        '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
      ]
    }
  }

  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion)
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('uk-UA', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8 text-center">
          <div className="flex items-center justify-center mb-4">
            <div className="p-3 bg-blue-100 rounded-full">
              <Bot className="h-8 w-8 text-blue-600" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">AI-–ü–æ–º–æ—â–Ω–∏–∫</h1>
          <p className="text-gray-600">–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –∫–Ω–∏–≥–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ</p>
        </div>

        {/* Chat Container */}
        <Card className="h-[600px] flex flex-col">
          <CardHeader className="border-b">
            <CardTitle className="flex items-center gap-2">
              <MessageCircle className="h-5 w-5" />
              –ß–∞—Ç —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º
            </CardTitle>
          </CardHeader>
          
          <CardContent className="flex-1 flex flex-col p-0">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                    {/* Avatar */}
                    <div className={`flex-shrink-0 ${message.type === 'user' ? 'ml-3' : 'mr-3'}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        message.type === 'user' 
                          ? 'bg-blue-600' 
                          : 'bg-gray-200'
                      }`}>
                        {message.type === 'user' ? (
                          <User className="h-4 w-4 text-white" />
                        ) : (
                          <Bot className="h-4 w-4 text-gray-600" />
                        )}
                      </div>
                    </div>

                    {/* Message Content */}
                    <div className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                      <div className={`px-4 py-2 rounded-lg ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}>
                        <div className="whitespace-pre-wrap">{message.content}</div>
                      </div>
                      
                      {/* Timestamp */}
                      <div className="text-xs text-gray-500 mt-1">
                        {formatTime(message.timestamp)}
                      </div>

                      {/* Suggestions */}
                      {message.suggestions && message.suggestions.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-2">
                          {message.suggestions.map((suggestion, index) => (
                            <Button
                              key={index}
                              variant="outline"
                              size="sm"
                              onClick={() => handleSuggestionClick(suggestion)}
                              className="text-xs"
                            >
                              {suggestion}
                            </Button>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}

              {/* Loading indicator */}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-center gap-2 text-gray-500">
                    <Bot className="h-4 w-4" />
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Input */}
            <div className="border-t p-4">
              <div className="flex gap-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–Ω–∏–≥–∞—Ö –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–µ..."
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  disabled={isLoading}
                />
                <Button 
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isLoading}
                  className="px-6"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card className="p-4 hover:shadow-md transition-shadow cursor-pointer">
            <div className="flex items-center gap-3">
              <BookOpen className="h-8 w-8 text-blue-600" />
              <div>
                <h3 className="font-semibold">–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥</h3>
                <p className="text-sm text-gray-600">–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏</p>
              </div>
            </div>
          </Card>

          <Card className="p-4 hover:shadow-md transition-shadow cursor-pointer">
            <div className="flex items-center gap-3">
              <Lightbulb className="h-8 w-8 text-yellow-600" />
              <div>
                <h3 className="font-semibold">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                <p className="text-sm text-gray-600">–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</p>
              </div>
            </div>
          </Card>

          <Card className="p-4 hover:shadow-md transition-shadow cursor-pointer">
            <div className="flex items-center gap-3">
              <Sparkles className="h-8 w-8 text-purple-600" />
              <div>
                <h3 className="font-semibold">–ü–æ–¥–ø–∏—Å–∫–∞</h3>
                <p className="text-sm text-gray-600">–£–∑–Ω–∞–π—Ç–µ –æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö</p>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  )
}
