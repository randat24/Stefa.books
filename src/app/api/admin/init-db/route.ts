import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { logger } from '@/lib/logger';

export async function POST() {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    logger.info('Initializing database with basic structure', {}, 'Database');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É categories —á–µ—Ä–µ–∑ SQL
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS public.categories (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(255) UNIQUE NOT NULL,
        description TEXT,
        icon VARCHAR(50),
        color VARCHAR(7),
        parent_id UUID REFERENCES public.categories(id),
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ RPC
    const { error: tableError } = await supabase.rpc('exec', { sql: createTableSQL });
    
    if (tableError) {
      logger.error('Error creating categories table', { error: tableError }, 'Database');
      return NextResponse.json({ 
        success: false,
        error: 'Failed to create categories table',
        details: tableError.message,
        suggestion: 'Please create the categories table manually in Supabase dashboard with the following SQL:',
        sql: createTableSQL
      }, { status: 500 });
    }
    
    logger.info('Categories table created successfully', {}, 'Database');
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [
      {
        name: '–ó–∞ –≤—ñ–∫–æ–º',
        slug: 'age',
        description: '–ö–Ω–∏–≥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø',
        icon: 'üë∂',
        color: '#FF6B6B',
        parent_id: null,
        sort_order: 1
      },
      {
        name: '–ó–∞ –∂–∞–Ω—Ä–æ–º',
        slug: 'genre',
        description: '–ö–Ω–∏–≥–∏ —Ä—ñ–∑–Ω–∏—Ö –∂–∞–Ω—Ä—ñ–≤',
        icon: 'üìö',
        color: '#4ECDC4',
        parent_id: null,
        sort_order: 2
      },
      {
        name: '–î–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö',
        slug: 'adults',
        description: '–ö–Ω–∏–≥–∏ –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö',
        icon: 'üë®‚Äçüíº',
        color: '#45B7D1',
        parent_id: null,
        sort_order: 3
      }
    ];
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: createdCategories, error: categoriesError } = await supabase
      .from('categories')
      .upsert(categories, { onConflict: 'slug' })
      .select();
      
    if (categoriesError) {
      logger.error('Error creating categories', { error: categoriesError }, 'Database');
      return NextResponse.json({ 
        success: false,
        error: categoriesError.message,
        details: 'Failed to create parent categories'
      }, { status: 500 });
    }
    
    logger.info('Parent categories created', { count: createdCategories?.length }, 'Database');
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const ageCategory = createdCategories?.find((c: any) => c.slug === 'age');
    const genreCategory = createdCategories?.find((c: any) => c.slug === 'genre');
    const adultCategory = createdCategories?.find((c: any) => c.slug === 'adults');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const subcategories = [
      // –ó–∞ –≤—ñ–∫–æ–º
      { name: '–ù–∞–π–º–µ–Ω—à—ñ (0-2 —Ä–æ–∫–∏)', slug: 'age-0-2', parent_id: ageCategory?.id, sort_order: 1, icon: 'üë∂', color: '#FFB6C1' },
      { name: '–î–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫ (3-5 —Ä–æ–∫—ñ–≤)', slug: 'age-3-5', parent_id: ageCategory?.id, sort_order: 2, icon: 'üßí', color: '#FFD700' },
      { name: '–ú–æ–ª–æ–¥—à–∏–π –≤—ñ–∫ (6-8 —Ä–æ–∫—ñ–≤)', slug: 'age-6-8', parent_id: ageCategory?.id, sort_order: 3, icon: 'üë¶', color: '#98FB98' },
      { name: '–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫ (9-12 —Ä–æ–∫—ñ–≤)', slug: 'age-9-12', parent_id: ageCategory?.id, sort_order: 4, icon: 'üëß', color: '#87CEEB' },
      { name: '–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫ (13+ —Ä–æ–∫—ñ–≤)', slug: 'age-13-plus', parent_id: ageCategory?.id, sort_order: 5, icon: 'üë®‚Äçüéì', color: '#DDA0DD' },
      
      // –ó–∞ –∂–∞–Ω—Ä–æ–º
      { name: '–ö–∞–∑–∫–∏', slug: 'genre-fairy-tales', parent_id: genreCategory?.id, sort_order: 1, icon: 'üßö‚Äç‚ôÄÔ∏è', color: '#FF69B4' },
      { name: '–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ', slug: 'genre-educational', parent_id: genreCategory?.id, sort_order: 2, icon: 'üî¨', color: '#32CD32' },
      { name: '–î–µ—Ç–µ–∫—Ç–∏–≤', slug: 'genre-detective', parent_id: genreCategory?.id, sort_order: 3, icon: 'üïµÔ∏è', color: '#8B4513' },
      { name: '–ü—Ä–∏–≥–æ–¥–∏', slug: 'genre-adventure', parent_id: genreCategory?.id, sort_order: 4, icon: 'üèîÔ∏è', color: '#FF8C00' },
      { name: '–ü–æ–≤—ñ—Å—Ç—å', slug: 'genre-novel', parent_id: genreCategory?.id, sort_order: 5, icon: 'üìñ', color: '#9370DB' },
      { name: '–§–µ–Ω—Ç–µ–∑—ñ', slug: 'genre-fantasy', parent_id: genreCategory?.id, sort_order: 6, icon: 'üßô‚Äç‚ôÇÔ∏è', color: '#9932CC' },
      { name: '–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –ø—Ä–æ–∑–∞', slug: 'genre-realistic', parent_id: genreCategory?.id, sort_order: 7, icon: 'üìù', color: '#2F4F4F' },
      { name: '–†–æ–º–∞–Ω—Ç–∏–∫–∞', slug: 'genre-romance', parent_id: genreCategory?.id, sort_order: 8, icon: 'üíï', color: '#FF1493' },
      
      // –î–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö
      { name: '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —ñ —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫', slug: 'adults-psychology', parent_id: adultCategory?.id, sort_order: 1, icon: 'üß†', color: '#4169E1' },
      { name: '–°—É—á–∞—Å–Ω–∞ –ø—Ä–æ–∑–∞', slug: 'adults-modern-prose', parent_id: adultCategory?.id, sort_order: 2, icon: 'üìö', color: '#DC143C' }
    ];
    
    const { data: createdSubcategories, error: subcategoriesError } = await supabase
      .from('categories')
      .upsert(subcategories, { onConflict: 'slug' })
      .select();
      
    if (subcategoriesError) {
      logger.error('Error creating subcategories', { error: subcategoriesError }, 'Database');
      return NextResponse.json({ 
        success: false,
        error: subcategoriesError.message,
        details: 'Failed to create subcategories'
      }, { status: 500 });
    }
    
    logger.info('Subcategories created', { count: createdSubcategories?.length }, 'Database');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: allCategories } = await supabase
      .from('categories')
      .select('id, name, slug, parent_id, sort_order')
      .order('sort_order');
    
    logger.info('Database initialization completed successfully', { 
      totalCategories: allCategories?.length || 0,
      parentCategories: createdCategories?.length || 0,
      subcategories: createdSubcategories?.length || 0
    }, 'Database');
    
    return NextResponse.json({
      success: true,
      message: 'Database initialized successfully with categories',
      results: {
        totalCategories: allCategories?.length || 0,
        parentCategories: createdCategories?.length || 0,
        subcategories: createdSubcategories?.length || 0,
        categories: allCategories?.slice(0, 10) // –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      }
    });
    
  } catch (error) {
    logger.error('Database initialization failed', error, 'Database');
    return NextResponse.json({ 
      success: false, 
      error: 'Database initialization failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
