'use client';

/**
 * Cache-busting utility to ensure users always get the most up-to-date assets
 * 
 * This utility helps add version parameters to static assets to force browser cache invalidation.
 * It's especially useful after deployments to ensure users don't see stale content.
 */

// Current build timestamp used for cache-busting (updated on each build)
// Force cache invalidation for phone number update
export const BUILD_ID = process.env.NEXT_PUBLIC_BUILD_ID || '2025-09-16-phone-update';

/**
 * Add cache-busting parameter to URL
 * 
 * @param url - The URL of the asset to cache-bust
 * @param useRandomParam - Whether to use a random parameter for additional cache invalidation
 * @returns The URL with cache-busting parameter
 */
export function withCacheBuster(url: string, useRandomParam: boolean = false): string {
  try {
    if (!url) return url;
    
    // Skip URLs that already have cache parameters
    if (url.includes('_cb=') || url.includes('v=')) return url;
    
    // Skip URLs that don't need busting (e.g., data URLs)
    if (url.startsWith('data:')) return url;
    
    // Add unique cache-busting parameter
    const separator = url.includes('?') ? '&' : '?';
    const cacheBuster = `_cb=${BUILD_ID}`;
    const randomParam = useRandomParam ? `&_r=${Math.random().toString(36).substring(2, 8)}` : '';
    
    return `${url}${separator}${cacheBuster}${randomParam}`;
  } catch (e) {
    console.warn('Error adding cache-buster to URL:', e);
    return url;
  }
}

/**
 * Add daily cache-busting parameter to static assets like logos and icons
 * This ensures they get refreshed at least once per day
 * 
 * @param url - The URL of the asset
 * @returns The URL with daily cache-busting parameter
 */
export function withDailyCacheBuster(url: string): string {
  try {
    if (!url) return url;
    
    // Skip URLs that don't need busting
    if (url.startsWith('data:')) return url;
    
    // Create daily timestamp for cache-busting
    const today = new Date().toISOString().split('T')[0];
    const separator = url.includes('?') ? '&' : '?';
    
    return `${url}${separator}v=${today}`;
  } catch (e) {
    console.warn('Error adding daily cache-buster to URL:', e);
    return url;
  }
}

/**
 * Service worker registration utility to handle cache invalidation
 * This can be used in _app.tsx or layout.tsx to register a service worker
 * that manages cache invalidation
 */
export function registerCacheInvalidationWorker() {
  if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {
    return;
  }

  // Clear local storage cache on new version
  const lastVersion = localStorage.getItem('app_version');
  if (lastVersion !== BUILD_ID) {
    console.log('New version detected, clearing cache...');
    // Clear session storage
    sessionStorage.clear();
    // Update stored version
    localStorage.setItem('app_version', BUILD_ID);
    // Clear relevant cache items
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key?.startsWith('image_cache_') || key?.startsWith('data_cache_')) {
        localStorage.removeItem(key);
      }
    }
  }
}

/**
 * FORCE CACHE INVALIDATION - –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
 */
export function forceCacheInvalidation() {
  if (typeof window === 'undefined') return;

  console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...');

  try {
    // 1. –û—á–∏—â–∞–µ–º localStorage
    localStorage.clear();

    // 2. –û—á–∏—â–∞–µ–º sessionStorage
    sessionStorage.clear();

    // 3. –û—á–∏—â–∞–µ–º Service Worker –∫–µ—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration => {
        if (registration.active) {
          registration.active.postMessage({ type: 'SKIP_WAITING' });
        }
      });

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–µ—à–∏
      if ('caches' in window) {
        caches.keys().then(cacheNames => {
          cacheNames.forEach(cacheName => {
            caches.delete(cacheName);
          });
        });
      }
    }

    // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –∫–µ—à–∞
    if (location.search.includes('cache_cleared=true')) {
      // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    const separator = location.search ? '&' : '?';
    const newUrl = `${location.href}${separator}cache_cleared=true&t=${Date.now()}`;

    setTimeout(() => {
      window.location.href = newUrl;
    }, 100);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.reload();
  }
}
