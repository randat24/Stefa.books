'use client';

import { useEffect } from 'react';
import { registerCacheInvalidationWorker, BUILD_ID } from '@/lib/cache-buster';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞
 * –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–µ–π
 */
export function CacheInvalidator() {
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    const lastVersion = localStorage.getItem('app_version');
    const currentVersion = BUILD_ID;

    // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
    if (!lastVersion || lastVersion !== currentVersion) {
      console.log('üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞, –æ—á–∏—â–∞–µ–º –∫–µ—à...');

      try {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏
        if ('caches' in window) {
          caches.keys().then(cacheNames => {
            console.log('–£–¥–∞–ª—è–µ–º –∫–µ—à–∏:', cacheNames);
            return Promise.all(
              cacheNames.map(cacheName => caches.delete(cacheName))
            );
          }).then(() => {
            console.log('‚úÖ –í—Å–µ –∫–µ—à–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã');
          });
        }

        // –û—á–∏—â–∞–µ–º localStorage –∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const importantKeys = ['user_preferences', 'auth_token'];
        const keysToRemove: string[] = [];

        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && !importantKeys.includes(key)) {
            keysToRemove.push(key);
          }
        }

        keysToRemove.forEach(key => localStorage.removeItem(key));

        // –û—á–∏—â–∞–µ–º sessionStorage
        sessionStorage.clear();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        localStorage.setItem('app_version', currentVersion);
        localStorage.setItem('cache_cleared_at', new Date().toISOString());

        console.log(`‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏: ${currentVersion}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const notification = document.createElement('div');
        notification.innerHTML = `
          <div style="
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4ade80;
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 9999;
            font-family: system-ui, -apple-system, sans-serif;
            font-size: 14px;
            max-width: 300px;
            animation: slideIn 0.3s ease;
          ">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span>üîÑ</span>
              <div>
                <div style="font-weight: 600;">–°–∞–π—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!</div>
                <div style="opacity: 0.9; font-size: 12px; margin-top: 4px;">
                  –ö–µ—à –æ—á–∏—â–µ–Ω–æ, –∫–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∏–π
                </div>
              </div>
            </div>
          </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
          @keyframes slideIn {
            from {
              transform: translateX(100%);
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }
        `;
        document.head.appendChild(style);
        document.body.appendChild(notification);

        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          notification.style.animation = 'slideIn 0.3s ease reverse';
          setTimeout(() => {
            document.body.removeChild(notification);
            document.head.removeChild(style);
          }, 300);
        }, 5000);

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error);
      }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π cache invalidation worker
    registerCacheInvalidationWorker();

  }, []);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç
}