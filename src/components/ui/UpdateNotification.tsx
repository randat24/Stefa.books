'use client'

import { useState, useEffect } from 'react'
import { RefreshCw, X } from 'lucide-react'

export default function UpdateNotification() {
  const [isVisible, setIsVisible] = useState(false)
  const [isUpdating, setIsUpdating] = useState(false)
  const [newVersion, setNewVersion] = useState<string>('')

  useEffect(() => {
    if ('serviceWorker' in navigator) {
      // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker –æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data?.type === 'NEW_VERSION_AVAILABLE') {
          console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:', event.data.buildId)
          setNewVersion(event.data.buildId)
          setIsVisible(true)
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      navigator.serviceWorker.ready.then((registration) => {
        if (registration.active) {
          const channel = new MessageChannel()
          channel.port1.onmessage = (event) => {
            const currentVersion = process.env.NEXT_PUBLIC_BUILD_ID
            const swVersion = event.data.version

            console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π - –¢–µ–∫—É—â–∞—è:', currentVersion, 'SW:', swVersion)

            if (currentVersion !== swVersion) {
              setNewVersion(swVersion)
              setIsVisible(true)
            }
          }

          registration.active.postMessage(
            { type: 'GET_VERSION' },
            [channel.port2]
          )
        }
      })
    }
  }, [])

  const handleUpdate = async () => {
    setIsUpdating(true)
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...')

    try {
      if ('serviceWorker' in navigator) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏ —á–µ—Ä–µ–∑ Service Worker
        const registration = await navigator.serviceWorker.ready
        if (registration.active) {
          const channel = new MessageChannel()
          channel.port1.onmessage = (event) => {
            if (event.data.success) {
              console.log('‚úÖ Service Worker –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã')
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º browser cache
              if ('caches' in window) {
                caches.keys().then(names => {
                  names.forEach(name => {
                    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–µ—à:', name)
                    caches.delete(name)
                  })
                })
              }

              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
              setTimeout(() => {
                console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...')
                window.location.reload()
              }, 500)
            }
          }

          registration.active.postMessage(
            { type: 'CLEAR_ALL_CACHE' },
            [channel.port2]
          )
        }
      } else {
        // –ï—Å–ª–∏ Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        console.log('üîÑ Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞')
        window.location.reload()
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.location.reload()
    }
  }

  const handleDismiss = () => {
    setIsVisible(false)
  }

  if (!isVisible) {
    return null
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 max-w-sm">
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
            –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </h3>
          <p className="text-xs text-gray-600 dark:text-gray-400 mb-3">
            –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
          </p>
          <div className="flex gap-2">
            <button
              onClick={handleUpdate}
              disabled={isUpdating}
              className="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 rounded-md transition-colors"
            >
              <RefreshCw className={`h-3 w-3 ${isUpdating ? 'animate-spin' : ''}`} />
              {isUpdating ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
            </button>
            <button
              onClick={handleDismiss}
              className="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              <X className="h-3 w-3" />
              –ü–æ–∑–∂–µ
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
