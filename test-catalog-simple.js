#!/usr/bin/env node

/**
 * Simple Catalog Test
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
 */

import fetch from 'node-fetch';

async function testCatalogSimple() {
    console.log('üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞...\n');

    try {
        // Test 1: Check if the page loads
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        const pageResponse = await fetch('http://localhost:3000/books');
        
        if (pageResponse.ok) {
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', pageResponse.status);
            const html = await pageResponse.text();
            
            if (html.includes('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –∫–Ω–∏–≥')) {
                console.log('‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');
            } else if (html.includes('–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥')) {
                console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞–π–¥–µ–Ω');
            } else {
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            }
        } else {
            console.error('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', pageResponse.status);
        }

        // Test 2: Check API
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
        const apiResponse = await fetch('http://localhost:3000/api/books?limit=1');
        
        if (apiResponse.ok) {
            const data = await apiResponse.json();
            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.success);
            console.log('üìñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥:', data.data?.length || 0);
        } else {
            console.error('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', apiResponse.status);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

// Run the test
testCatalogSimple();