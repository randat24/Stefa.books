#!/usr/bin/env node

/**
 * Debug Catalog Component
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Error: Missing Supabase environment variables');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCatalogDebug() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...\n');

    try {
        // Test 1: Direct Supabase query
        console.log('1Ô∏è‚É£ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Supabase...');
        const { data: books, error: booksError } = await supabase
            .from('books')
            .select(`
                id, title, author, category, description, pages, cover_url,
                is_active, subcategory_id, author_text, author_id,
                search_vector, search_text, created_at, updated_at
            `)
            .order('title', { ascending: true })
            .range(0, 4);

        if (booksError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', booksError);
        } else {
            console.log('‚úÖ –ö–Ω–∏–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', books.length);
            console.log('üìö –ü—Ä–∏–º–µ—Ä—ã:', books.slice(0, 2));
        }

        // Test 2: API endpoint
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint...');
        const response = await fetch('http://localhost:3000/api/books?limit=3');
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.success);
            console.log('üìñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥:', data.data?.length || 0);
            if (data.data && data.data.length > 0) {
                console.log('üìö –ü—Ä–∏–º–µ—Ä –∫–Ω–∏–≥–∏:', {
                    id: data.data[0].id,
                    title: data.data[0].title,
                    author: data.data[0].author,
                    category: data.data[0].category,
                    is_active: data.data[0].is_active
                });
            }
        } else {
            console.error('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.status, response.statusText);
        }

        // Test 3: Frontend page
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
        const pageResponse = await fetch('http://localhost:3000/books');
        
        if (pageResponse.ok) {
            const html = await pageResponse.text();
            if (html.includes('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –∫–Ω–∏–≥')) {
                console.log('‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');
            } else if (html.includes('–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥')) {
                console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞–π–¥–µ–Ω');
            } else {
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            }
        } else {
            console.error('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', pageResponse.status);
        }

    } catch (error) {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// Run the test
testCatalogDebug();