#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseAnon = createClient(CONFIG.supabaseUrl, CONFIG.supabaseAnonKey);
const supabaseService = createClient(CONFIG.supabaseUrl, CONFIG.supabaseServiceKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function checkConnection() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log(`üìä Supabase URL: ${CONFIG.supabaseUrl}`);
    console.log(`üîë Anon Key: ${CONFIG.supabaseAnonKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`üîë Service Key: ${CONFIG.supabaseServiceKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anon key
    const { error: anonError } = await supabaseAnon
      .from('books')
      .select('count')
      .limit(1);
    
    if (anonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ anon key:', anonError.message);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anon key: OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ service key
    const { error: serviceError } = await supabaseService
      .from('books')
      .select('count')
      .limit(1);
    
    if (serviceError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ service key:', serviceError.message);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ service key: OK');
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseStructure() {
  try {
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É books
    const { error: booksError } = await supabaseService
      .from('books')
      .select('*')
      .limit(1);
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ books:', booksError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ books: OK');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É categories
    const { error: categoriesError } = await supabaseService
      .from('categories')
      .select('*')
      .limit(1);
    
    if (categoriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ categories:', categoriesError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories: OK');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    const { error: usersError } = await supabaseService
      .from('users')
      .select('*')
      .limit(1);
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users:', usersError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: OK');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function checkData() {
  try {
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
    const { count: booksCount, error: booksCountError } = await supabaseService
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (booksCountError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–Ω–∏–≥:', booksCountError.message);
    } else {
      console.log(`üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: ${booksCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏
    const { count: availableBooksCount, error: availableBooksError } = await supabaseService
      .from('books')
      .select('*', { count: 'exact', head: true })
      .eq('available', true);
    
    if (availableBooksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥:', availableBooksError.message);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥: ${availableBooksCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { count: categoriesCount, error: categoriesCountError } = await supabaseService
      .from('categories')
      .select('*', { count: 'exact', head: true });
    
    if (categoriesCountError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesCountError.message);
    } else {
      console.log(`üìÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { count: usersCount, error: usersCountError } = await supabaseService
      .from('users')
      .select('*', { count: 'exact', head: true });
    
    if (usersCountError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersCountError.message);
    } else {
      console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–≥
async function checkRecentBooks() {
  try {
    console.log('\nüìñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:');
    
    const { data: recentBooks, error: recentBooksError } = await supabaseService
      .from('books')
      .select('title, author, code, available, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (recentBooksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–≥:', recentBooksError.message);
    } else {
      recentBooks.forEach((book, index) => {
        console.log(`   ${index + 1}. ${book.title} - ${book.author} (${book.code})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–≥:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS (Row Level Security)
async function checkRLS() {
  try {
    console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ Row Level Security...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ anon key (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    const { error: publicBooksError } = await supabaseAnon
      .from('books')
      .select('title, author, available')
      .limit(1);
    
    if (publicBooksError) {
      console.error('‚ùå RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º —á–µ—Ä–µ–∑ anon key:', publicBooksError.message);
    } else {
      console.log('‚úÖ RLS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —Å–∞–π—Ç—É...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!CONFIG.supabaseUrl || !CONFIG.supabaseAnonKey) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.error('   NEXT_PUBLIC_SUPABASE_URL:', CONFIG.supabaseUrl ? '‚úÖ' : '‚ùå');
      console.error('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', CONFIG.supabaseAnonKey ? '‚úÖ' : '‚ùå');
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    const connectionOk = await checkConnection();
    if (!connectionOk) {
      console.error('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      return;
    }
    
    await checkDatabaseStructure();
    await checkData();
    await checkRecentBooks();
    await checkRLS();
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìä –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ —Å–∞–π—Ç—É.');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export {
  checkConnection,
  checkDatabaseStructure,
  checkData,
  checkRecentBooks,
  checkRLS
};
