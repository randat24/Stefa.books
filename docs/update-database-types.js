#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã subscription_requests
 */

const fs = require('fs');
const path = require('path');

// –¢–∏–ø—ã –¥–ª—è subscription_requests
const subscriptionRequestsTypes = `
      subscription_requests: {
        Row: {
          id: string
          name: string
          email: string
          phone: string
          address: string
          social: string | null
          plan: string
          payment_method: string
          status: string
          notes: string | null
          screenshot: string | null
          admin_notes: string | null
          privacy_consent: boolean | null
          marketing_consent: boolean | null
          created_at: string | null
          updated_at: string | null
        }
        Insert: {
          id?: string
          name: string
          email: string
          phone: string
          address: string
          social?: string | null
          plan: string
          payment_method: string
          status?: string
          notes?: string | null
          screenshot?: string | null
          admin_notes?: string | null
          privacy_consent?: boolean | null
          marketing_consent?: boolean | null
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          name?: string
          email?: string
          phone?: string
          address?: string
          social?: string | null
          plan?: string
          payment_method?: string
          status?: string
          notes?: string | null
          screenshot?: string | null
          admin_notes?: string | null
          privacy_consent?: boolean | null
          marketing_consent?: boolean | null
          created_at?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }`;

async function updateDatabaseTypes() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const typesPath = path.join(__dirname, 'src/lib/database.types.ts');
    let content = fs.readFileSync(typesPath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ subscription_requests
    const tablesStart = content.indexOf('Tables: {');
    const tablesEnd = content.indexOf('}', tablesStart);
    
    if (tablesStart === -1 || tablesEnd === -1) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é Tables –≤ —Ñ–∞–π–ª–µ —Ç–∏–ø–æ–≤');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ subscription_requests
    if (content.includes('subscription_requests:')) {
      console.log('‚úÖ –¢–∏–ø—ã –¥–ª—è subscription_requests —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      return;
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è subscription_requests
    const beforeTables = content.substring(0, tablesStart + 9);
    const afterTables = content.substring(tablesEnd);
    
    const newContent = beforeTables + '\n' + subscriptionRequestsTypes + '\n    ' + afterTables;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = typesPath + '.backup';
    fs.writeFileSync(backupPath, content);
    console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:', backupPath);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(typesPath, newContent);
    console.log('‚úÖ –¢–∏–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    try {
      require('typescript').transpile(newContent);
      console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å TypeScript –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º TypeScript:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤:', error);
  }
}

if (require.main === module) {
  updateDatabaseTypes().catch(console.error);
}

module.exports = { updateDatabaseTypes };
