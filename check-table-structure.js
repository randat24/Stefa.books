#!/usr/bin/env node

/**
 * Table Structure Check Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã books
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Error: Missing Supabase environment variables');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTableStructure() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã books...\n');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        const { data: sampleBook, error } = await supabase
            .from('books')
            .select('*')
            .limit(1)
            .single();

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
            return;
        }

        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã books:');
        console.log('=====================================');
        
        const fields = Object.keys(sampleBook);
        fields.forEach(field => {
            const value = sampleBook[field];
            const type = typeof value;
            const hasValue = value !== null && value !== undefined;
            console.log(`üìã ${field}: ${type} ${hasValue ? `(${value})` : '(null/undefined)'}`);
        });

        console.log('\nüìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π:', fields.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ database.types.ts
        console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å database.types.ts:');
        console.log('=====================================');
        
        const expectedFields = [
            'id', 'title', 'author', 'category', 'subcategory', 'description', 
            'short_description', 'code', 'isbn', 'pages', 'age_range', 'language', 
            'publisher', 'publication_year', 'cover_url', 'status', 'available', 
            'rating', 'rating_count', 'price_daily', 'price_weekly', 'price_monthly', 
            'badges', 'tags', 'search_vector', 'search_text', 'created_at', 'updated_at'
        ];

        expectedFields.forEach(field => {
            const exists = fields.includes(field);
            const status = exists ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${field}`);
        });

        const missingFields = expectedFields.filter(field => !fields.includes(field));
        const extraFields = fields.filter(field => !expectedFields.includes(field));

        if (missingFields.length > 0) {
            console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:', missingFields.join(', '));
        }

        if (extraFields.length > 0) {
            console.log('\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', extraFields.join(', '));
        }

    } catch (error) {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// Run the check
checkTableStructure();
